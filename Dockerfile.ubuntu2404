# syntax=docker/dockerfile:1
#- -------------------------------------------------------------------------------------------------
#- Global
#-
ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NOWARNINGS=yes
ARG PYTHONUNBUFFERED=1
ARG TZ=Asia/Tokyo

# NodeJs version
ARG NODE_ENV="production"
ARG NODE_VERSION=18


# AviSynthPlus
## renovate: datasource=github-releases packageName=AviSynth/AviSynthPlus versioning=semver
ARG AVISYNTHPLUS_VERSION=v3.7.3
## renovate: datasource=git-refs packageName=https://github.com/Mr-Ojii/l-smash.git branch=master versioning=git
ARG LSMASH_VERSION=315b4747d759e336ef30b18e93f2e676810e5a73
## renovate: datasource=git-refs packageName=https://github.com/Mr-Ojii/L-SMASH-Works.git branch=master versioning=git
ARG LSMASHWORKS_VERSION=fa20c138f7dfe6c28115529c5723ffd1c45c340b
## renovate: datasource=git-refs packageName=https://github.com/dwbuiten/obuparse.git branch=master versioning=git
ARG OBUPARSE_VERSION=8acb5193a64e5c8281c9f22805f75f044f5931f7

# Intel
## renovate: datasource=github-tags packageName=intel/gmmlib versioning=semver
ARG INTEL_GMMLIB_VERSION=intel-gmmlib-22.6.0
## renovate: datasource=github-releases packageName=intel/media-driver
ARG INTEL_MEDIA_DRIVER_VERSION=intel-media-24.3.4
## renovate: datasource=github-releases packageName=intel/libva versioning=semver
ARG INTEL_LIBVA_VERSION=2.22.0
## renovate: datasource=github-tags packageName=intel/libvpl versioning=git
ARG INTEL_LIBVPL_VERSION=v2.14.0
## renovate: datasource=github-releases packageName=intel/vpl-gpu-rt
ARG INTEL_VPL_GPU_RT_VERSION=intel-onevpl-24.3.4

# FFmpeg
## renovate: datasource=github-tags packageName=FFmpeg/FFmpeg versioning=semver
ARG FFMPEG_VERSION=n7.1
## renovate: datasource=git-tags packageName=https://code.videolan.org/videolan/dav1d.git versioning=semver
ARG AV1_DAV1D_VERSION=1.5.1
## renovate: datasource=git-tags packageName=https://gitlab.com/AOMediaCodec/SVT-AV1.git versioning=semver
ARG AV1_SVTAV1_VERSION=v2.3.0
## renovate: datasource=github-tags packageName=webmproject/libvpx versioning=semver
ARG LIBVPX_VERSION=v1.15.0
## renovate: datasource=github-releases packageName=xiph/opus versioning=semver
ARG OPUS_VERSION=v1.5.2
## renovate: datasource=github-releases packageName=Netflix/vmaf versioning=semver
ARG VMAF_VERSION=v3.0.0
## renovate: datasource=git-refs packageName=https://code.videolan.org/videolan/x264.git branch=stable versioning=git
ARG X264_VERSION=31e19f92f00c7003fa115047ce50978bc98c3a0d
## renovate: datasource=git-refs packageName=https://bitbucket.org/multicoreware/x265_git.git versioning=semver
ARG X265_VERSION=4.0


# retry dns and some http codes that might be transient errors
ARG WGET_OPTS="--retry-on-host-error --retry-on-http-error=429,500,502,503"

#- -------------------------------------------------------------------------------------------------
#- Builder
#-
FROM ubuntu:noble AS base
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBIAN_FRONTEND
ARG DEBCONF_NOWARNINGS
ARG PYTHONUNBUFFERED

ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ARG NODE_VERSION

ARG TZ
ENV TZ=${TZ}

SHELL ["/bin/bash", "-c"]

RUN echo "**** Dependencies ****" && \
    set -eux && \
    apt-get update && \
    apt-get -y upgrade && \
    apt-get -y install --no-install-recommends \
    binutils \
    ca-certificates \
    curl \
    gnupg \
    jq \
    less \
    tzdata \
    wget \
    && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "**** Nodejs setup ****" && \
    set -eux && \
    curl -fsSL "https://deb.nodesource.com/setup_${NODE_VERSION}.x" | bash - && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    nodejs \
    && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "**** Nodejs setup check ****" && \
    set -eux && \
    node -v && \
    npm --version


#- -------------------------------------------------------------------------------------------------
#- Build ffmpeg
#-
FROM base AS build-ffmpeg
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PYTHONUNBUFFERED
ARG WGET_OPTS

ARG PREFIX="/opt/ffmpeg"
ENV LD_LIBRARY_PATH="${PREFIX}/lib:/opt/modules/lib:/usr/local/lib"
ENV PKG_CONFIG_PATH="${PREFIX}/share/pkgconfig:${PREFIX}/lib/pkgconfig:/opt/modules/lib/pkgconfig"

# AviSynthPlus
ARG AVISYNTHPLUS_VERSION \
    LSMASH_VERSION \
    LSMASHWORKS_VERSION \
    OBUPARSE_VERSION

# Intel
ARG INTEL_GMMLIB_VERSION \
    INTEL_MEDIA_DRIVER_VERSION \
    INTEL_LIBVA_VERSION \
    INTEL_LIBVPL_VERSION \
    INTEL_VPL_GPU_RT_VERSION

# FFmpeg
ARG FFMPEG_VERSION \
    FFMPEG_URL="https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2" \
    AV1_DAV1D_VERSION \
    AV1_SVTAV1_VERSION \
    LIBVPX_VERSION \
    OPUS_VERSION \
    VMAF_VERSION \
    X264_VERSION \
    X265_VERSION

RUN echo "**** Create directory ****" && \
    set -eux && \
    mkdir -p "${PREFIX}" "${PREFIX}/bin" "${PREFIX}/include" \
             "${PREFIX}/lib" "${PREFIX}/lib/pkgconfig" "${PREFIX}/src"

RUN echo "**** Build Dependencies ****" && \
    set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    apt-file \
    autoconf \
    automake \
    build-essential \
    checkinstall \
    cmake \
    doxygen \
    git-core \
    meson \
    nasm \
    ninja-build \
    pkg-config \
    texinfo \
    xxd \
    yasm \
    zlib1g-dev \
    && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "**** Library Dependencies ****" && \
    set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    libaribb24-dev \
    libass-dev \
    libfreetype6-dev \
    libmp3lame-dev \
    libnuma-dev \
    \
    ## join_logo_scp
    libboost-filesystem-dev \
    libboost-program-options-dev \
    libboost-system-dev \
    libgnutls28-dev \
    libtool \
    libunistring-dev \
    && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

RUN echo "**** AviSynth+ ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${AVISYNTHPLUS_VERSION} https://github.com/AviSynth/AviSynthPlus.git && \
    cd AviSynthPlus && \
    mkdir avisynth-build && \
    cd avisynth-build && \
    cmake ../ -G Ninja && \
    ninja && \
    checkinstall --pkgname=avisynth --pkgversion="$(grep -r \
    Version avs_core/avisynth.pc | cut -f2 -d " ")-$(date --rfc-3339=date | \
    sed 's/-//g')-git" --backup=no --deldoc=yes --delspec=yes --deldesc=yes \
    --strip=yes --stripso=yes --addso=yes --fstrans=no --default ninja install && \
    ninja -v -t clean && \
    cd "${PREFIX}" && \
    mv -v AviSynthPlus "${PREFIX}/src" && \
    \
    pkg-config --exists avisynth

RUN echo "**** libvmaf ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${VMAF_VERSION} https://github.com/Netflix/vmaf.git && \
    cd vmaf/libvmaf && \
    meson build --buildtype=release --libdir="${PREFIX}/lib" \
    -Dbuilt_in_models=true \
    -Denable_avx512=true \
    -Denable_docs=false \
    -Denable_float=true && \
    ninja -vC build && \
    ninja -vC build install && \
    ninja -vC build -t clean && \
    cd "${PREFIX}" && \
    mv -v vmaf* "${PREFIX}/src" && \
    \
    pkg-config --exists libvmaf

RUN echo "**** Intel QSV | libva ****" && \
    set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    libdrm-dev \
    && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_LIBVA_VERSION} https://github.com/intel/libva.git && \
    cd libva && \
    ./autogen.sh \
    --prefix=/usr \
    --libdir="${PREFIX}/lib" && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v libva "${PREFIX}/src" && \
    \
    pkg-config --exists libva

RUN echo "**** Intel QSV | gmmlib ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_GMMLIB_VERSION} https://github.com/intel/gmmlib.git && \
    cd gmmlib && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
        .. && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v gmmlib "${PREFIX}/src" && \
    \
    pkg-config --exists igdgmm

RUN echo "**** Intel QSV | media-driver ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_MEDIA_DRIVER_VERSION} https://github.com/intel/media-driver.git && \
    cd media-driver && \
    mkdir -p build && \
    cd build && \
    cmake \
        -DLIBVA_DRIVERS_PATH="${PREFIX}/lib/dri" \
        .. && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v media-driver "${PREFIX}/src" && \
    \
    pkg-config --exists igfxcmrt

RUN echo "**** Intel QSV | libvpl ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_LIBVPL_VERSION} https://github.com/intel/libvpl.git && \
    cd libvpl && \
    cmake -B build \
        -G"Unix Makefiles" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
        -DBUILD_SHARED_LIBS=OFF \
        -DBUILD_TESTS=OFF \
        -DENABLE_WARNING_AS_ERROR=ON && \
    cmake --build build -j$(nproc) && \
    cmake --install build && \
    cmake --build build --target clean && \
    cd "${PREFIX}" && \
    mv -v libvpl "${PREFIX}/src" && \
    \
    pkg-config --exists vpl

RUN echo "**** Intel QSV | VPL Runtime ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_VPL_GPU_RT_VERSION} https://github.com/intel/vpl-gpu-rt.git && \
    cd vpl-gpu-rt && \
    mkdir -p build && cd build && \
    cmake \
        -DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
        -DCMAKE_INSTALL_PREFIX=/usr \
    .. && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v vpl-gpu-rt "${PREFIX}/src" && \
    \
    pkg-config --exists libmfx-gen

RUN echo "**** dav1d ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${AV1_DAV1D_VERSION} https://code.videolan.org/videolan/dav1d.git && \
    mkdir dav1d/build && \
    cd dav1d/build && \
    meson setup \
    -Denable_tools=false \
    -Denable_tests=false \
    --default-library=static .. \
    --prefix "${PREFIX}" \
    --libdir="${PREFIX}/lib" && \
    ninja && \
    ninja install && \
    cd "${PREFIX}" && \
    mv -v dav1d "${PREFIX}/src" && \
    \
    pkg-config --exists dav1d

RUN echo "**** SVT-AV1 ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${AV1_SVTAV1_VERSION} https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
    mkdir SVT-AV1/build && \
    cd SVT-AV1/build && \
    cmake -G "Unix Makefiles" \
    -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_DEC=OFF \
    -DBUILD_SHARED_LIBS=OFF .. && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v SVT-AV1 "${PREFIX}/src" && \
    \
    pkg-config --exists SvtAv1Enc

## libvpx
RUN echo "**** libvpx ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${LIBVPX_VERSION} https://github.com/webmproject/libvpx.git && \
    cd libvpx && \
    ./configure \
        --disable-debug \
        --disable-docs \
        --disable-examples \
        --disable-install-bins \
        --disable-static \
        --disable-unit-tests \
        --enable-pic \
        --enable-shared \
        --enable-vp8 \
        --enable-vp9 \
        --enable-vp9-highbitdepth \
    && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v libvpx "${PREFIX}/src" && \
    \
    pkg-config --exists vpx

## opus
RUN echo "**** opus ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${OPUS_VERSION} https://github.com/xiph/opus.git && \
    cd opus && \
    autoreconf -fiv && \
    ./configure \
        --disable-static \
        --enable-shared \
    && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v opus "${PREFIX}/src" && \
    \
    pkg-config --exists opus

## x264
RUN echo "**** x264 ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    mkdir -p x264 && \
    cd x264 && \
    git init && \
    git remote add origin https://code.videolan.org/videolan/x264.git && \
    git fetch --depth 1 origin ${X264_VERSION} && \
    git checkout FETCH_HEAD && \
    ./configure \
        --disable-cli \
        --disable-static \
        --enable-pic \
        --enable-shared \
    && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v x264 "${PREFIX}/src" && \
    \
    pkg-config --exists x264

## x265
RUN echo "**** x265 ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${X265_VERSION} https://bitbucket.org/multicoreware/x265_git.git x265 && \
    cd x265/build/linux && \
    MAKEFLAGS="-j$(nproc)" ./multilib.sh && \
    make -C 8bit -j$(nproc) install && \
    cd "${PREFIX}" && \
    mv -v x265 "${PREFIX}/src" && \
    \
    pkg-config --exists x265

## FFmpeg
# ldflags stack-size=2097152 is to increase default stack size from 128KB (musl default) to something
# more similar to glibc (2MB). This fixing segfault with libsvtav1 as they seems to pass
# large things on the stack.
#
# ldfalgs -Wl,--allow-multiple-definition is a workaround for linking with multiple rust staticlib to
# not cause collision in toolchain symbols, see comment in checkdupsym script for details.
# Ref: https://github.com/wader/static-ffmpeg/blob/master/Dockerfile
RUN echo "**** ffmpeg ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${FFMPEG_VERSION} https://github.com/FFmpeg/FFmpeg.git ffmpeg && \
    cd ffmpeg && \
    ./configure \
    # encoder & decoder
    --enable-avisynth \
    --enable-libaribb24 \
    --enable-libass \
    --enable-libdav1d \
    --enable-libfreetype \
    --enable-libmp3lame \
    --enable-libopus \
    --enable-libsvtav1 \
    --enable-libvmaf \
    --enable-libvpl \
    --enable-libvpx \
    --enable-libx264 \
    --enable-libx265 \
    --enable-vaapi \
    \
    # License
    --enable-gpl \
    --enable-nonfree \
    --enable-version3 \
    \
    # small binary & static build
    --disable-debug \
    --disable-doc \
    --disable-ffplay \
    --disable-shared \
    --enable-small \
    --enable-static \
    --enable-stripping \
    \
    # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
    --extra-libs="-lpthread -lm" \
    --pkg-config-flags="--static" \
    \
    --extra-cflags="-fopenmp" \
    --extra-ldflags="-fopenmp -Wl,--allow-multiple-definition -Wl,-z,stack-size=2097152" \
    --toolchain=hardened | tee ffmpeg_configure.log && \
    make -j$(nproc) && \
    make install && \
    find . -type f -name '*.pc' -not -path '*doc/*' -exec cp -Lv '{}' ${PREFIX}/lib/pkgconfig \; && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v ffmpeg* "${PREFIX}/src"

RUN echo "**** obuparse ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    mkdir -p obuparse && \
    cd obuparse && \
    git init && \
    git remote add origin https://github.com/dwbuiten/obuparse.git && \
    git fetch --depth 1 origin ${OBUPARSE_VERSION} && \
    git checkout FETCH_HEAD && \
    sed -i'' -e "s@PREFIX=/usr/local@PREFIX=${PREFIX}@g" Makefile && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v obuparse "${PREFIX}/src"
RUN <<EOF
cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/obuparse.pc
prefix=${PREFIX}
includedir=\${prefix}/include

Name: obuparse
Description: A simple and portable single file AV1 OBU parser.
Version: ${OBUPARSE_VERSION}

Cflags: -I\${includedir}
_DOC_
EOF

RUN echo "**** l-smash ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    mkdir -p l-smash && \
    cd l-smash && \
    git init && \
    git remote add origin https://github.com/Mr-Ojii/l-smash.git && \
    git fetch --depth 1 origin ${LSMASH_VERSION} && \
    git checkout FETCH_HEAD && \
    ./configure \
    --enable-shared \
    --extra-cflags="-I${PREFIX}/include" \
    --extra-ldflags="-L${PREFIX}/lib" \
    --prefix="${PREFIX}" \
    && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    sed -i -E "s/^Version:\s(.*)$/Version: ${LSMASH_VERSION}/g" ${PREFIX}/lib/pkgconfig/liblsmash.pc && \
    cd "${PREFIX}" && \
    mv -v l-smash "${PREFIX}/src" && \
    \
    pkg-config --exists liblsmash

RUN echo "**** L-SMASH-Works ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    mkdir -p L-SMASH-Works && \
    cd L-SMASH-Works && \
    git init && \
    git remote add origin https://github.com/Mr-Ojii/L-SMASH-Works.git && \
    git fetch --depth 1 origin ${LSMASHWORKS_VERSION} && \
    git checkout FETCH_HEAD && \
    cd AviSynth && \
    LDFLAGS="-Wl,-Bsymbolic" meson build && \
    cd build && \
    ninja -v && \
    ninja install && \
    ninja -v -t clean && \
    cd "${PREFIX}" && \
    mv -v L-SMASH-Works "${PREFIX}/src"
RUN <<EOF
cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/liblsmashsource.pc
Name: L-SMASH-Works
Description: Note about LSMASHVideoSource and LibavSMASHSource.
Version: ${LSMASHWORKS_VERSION}

Libs: -L/usr/local/lib/avisynth
_DOC_
EOF

## join_logo_scp_trial build
COPY modules    "${PREFIX}/src/JLSTSL/modules"
ARG _BINDIR="${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial/bin/"
RUN echo "**** chapter_exe ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/chapter_exe/src" && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" Makefile && \
    make -j$(nproc) && \
    mv -v chapter_exe "${_BINDIR}"

RUN echo "**** logoframe ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/logoframe/src" && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" Makefile && \
    make -j$(nproc) && \
    mv -v logoframe "${_BINDIR}"

RUN echo "**** join_logo_scp ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/join_logo_scp/src" && \
    make -j$(nproc) && \
    mv -v join_logo_scp "${_BINDIR}"

RUN echo "**** tsdivider ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/tsdivider/" && \
    mkdir -p build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release .. && \
    make -j$(nproc) && \
    mv -v tsdivider "${_BINDIR}"

RUN echo "**** delogo ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/delogo/src" && \
    mkdir -p ${PREFIX}/lib/avisynth/ && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" \
    -e "s@INSTALL_DIR = /usr/local/lib/avisynth/@INSTALL_DIR = ${PREFIX}/lib/avisynth/@g" Makefile && \
    make -j$(nproc) && \
    mkdir -p /usr/local/lib/avisynth && \
    make install

RUN echo "**** join_logo_scp_trial ****" && \
    set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial" && \
    node -v && \
    npm --version && \
    npm install --no-save --loglevel=info --omit=dev && \
    mv -v ${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial /join_logo_scp_trial && \
    \
    # Copy JL directory
    rm -rf /join_logo_scp_trial/JL && \
    cp -av "${PREFIX}/src/JLSTSL/modules/join_logo_scp/JL" /join_logo_scp_trial/ && \
    test -f /join_logo_scp_trial/JL/data/ChList.csv && \
    \
    cd /join_logo_scp_trial && \
    npm link

RUN echo "**** FFmpeg runtime package list saved ****" && \
    set -eux && \
    apt-file update && \
    ldd /usr/local/bin/ffmpeg /usr/local/bin/ffprobe /usr/local/lib/avisynth/liblsmashsource.so | \
    awk -F ' => ' '{print $2}' | awk -F' ' '{print $1}' | \
    tr -d '\t' | sort | uniq | grep -v -E '^/opt/ffmpeg' | xargs -I'{}' cp -Lv '{}' ${PREFIX}/lib

RUN echo "**** check ffmpeg command ****" && \
    set -eux && \
    ls -lah /usr/local/bin && \
    ffmpeg -version && \
    ffmpeg -hide_banner -hwaccels && \
    ffmpeg -hide_banner -buildconf && \
    for i in decoders encoders; do echo ${i}:; ffmpeg -hide_banner -${i} | \
    egrep -i "[x|h]264|[x|h]265|av1|cuvid|hevc|qsv|vaapi|vp9"; done

RUN echo "**** Archive source code ****" && \
    set -eux && \
    cd "${PREFIX}" && \
    tar -cv -f "src-ffmpeg-$(date '+%Y%m%d%H%M%S%z').tar.xz" -C "${PREFIX}" src && \
    rm -rf "${PREFIX}/src"

RUN echo "**** versions.json write ****" && \
    set -eux && \
    LIBARIBB24_VERSION=$(pkg-config --modversion aribb24) \
    LIBASS_VERSION=$(pkg-config --modversion libass) \
    MP3LAME_VERSION=$(pkg-config --modversion lame) \
    FONTCONFIG_VERSION=$(pkg-config --modversion fontconfig) \
    FREETYPE_VERSION=$(pkg-config --modversion freetype2) \
    FRIBIDI_VERSION=$(pkg-config --modversion fribidi) \
    \
    jq -n \
    '{ \
    avisynth: env.AVISYNTHPLUS_VERSION, \
    ffmpeg: env.FFMPEG_VERSION, \
    fontconfig: env.FONTCONFIG_VERSION, \
    igdgmm: env.INTEL_GMMLIB_VERSION, \
    igfxcmrt: env.INTEL_MEDIA_DRIVER_VERSION, \
    libaribb24: env.LIBARIBB24_VERSION, \
    libass: env.LIBASS_VERSION, \
    libdav1d: env.AV1_DAV1D_VERSION, \
    libfreetype: env.FREETYPE_VERSION, \
    libfribidi: env.FRIBIDI_VERSION, \
    liblsmash: env.LSMASH_VERSION, \
    liblsmashsource: env.LSMASHWORKS_VERSION, \
    "libmfx-gen": env.INTEL_VPL_GPU_RT_VERSION, \
    libopus: env.OPUS_VERSION, \
    libsvtav1: env.AV1_SVTAV1_VERSION, \
    libva: env.INTEL_LIBVA_VERSION, \
    libvmaf: env.VMAF_VERSION, \
    libvpl: env.INTEL_LIBVPL_VERSION, \
    libvpx: env.LIBVPX_VERSION, \
    libx264: env.X264_VERSION, \
    libx265: env.X265_VERSION, \
    obuparse: env.OBUPARSE_VERSION, \
    }' > "${PREFIX}/versions.json"


#- -------------------------------------------------------------------------------------------------
#- Runner
#-
FROM base AS runner
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PYTHONUNBUFFERED

ENV LD_LIBRARY_PATH="/opt/ffmpeg/lib:/opt/modules/lib:/usr/local/lib"
ENV PKG_CONFIG_PATH="/opt/ffmpeg/share/pkgconfig:/opt/ffmpeg/lib/pkgconfig:/opt/modules/lib/pkgconfig"

# FFmpeg runtime
COPY --from=build-ffmpeg /usr/local/bin/ffmpeg      /usr/local/bin/ffmpeg
COPY --from=build-ffmpeg /usr/local/bin/ffprobe     /usr/local/bin/ffprobe
COPY --from=build-ffmpeg /opt/ffmpeg                /opt/ffmpeg
COPY --from=build-ffmpeg /usr/local/lib/avisynth    /usr/local/lib/avisynth

RUN echo "**** check FFmpeg library ****" && \
    set -eux && \
    ls -lah /opt/ffmpeg/lib && \
    ls -lah /usr/local/bin && \
    ffmpeg -version

RUN <<EOF
set -eu

for codec in "libx264" "libx265" "libsvtav1" "libvpx" "libvpx-vp9" "mpeg2video"
do
    echo "=============== codec:v ${codec} ==============="
    set -x
    ffmpeg -loglevel error -f lavfi -i testsrc2=size=1920x1080:rate=29.97:duration=0.5 -c:v ${codec} -f null -
    set +x
done

for codec in "aac" "flac" "libmp3lame" "libopus"
do
    echo "=============== codec:a ${codec} ==============="
    set -x
    ffmpeg -f lavfi -i sine=220:4:d=5 -f lavfi -i sine=220:0:d=5 -filter_complex amerge=2 -c:a aac -f null -
    set +x
done

EOF

COPY --from=build-ffmpeg /join_logo_scp_trial      /join_logo_scp_trial
WORKDIR "/join_logo_scp_trial"

RUN echo "**** join_logo_scp Dependencies ****" && \
    set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    libboost-filesystem-dev \
    libboost-program-options-dev \
    libboost-system-dev && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    npm link

RUN echo "**** check link join_logo_scp_trial ****" && \
    set -eux && \
    jlse --help

ENTRYPOINT [ "/bin/bash", "-c" ]
CMD [ "" ]

# vim: set filetype=dockerfile:
