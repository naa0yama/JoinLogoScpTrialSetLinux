# syntax=docker/dockerfile:1
#- -------------------------------------------------------------------------------------------------
#- Global
#-
ARG DEBCONF_NOWARNINGS=yes
ARG DEBIAN_FRONTEND=noninteractive
ARG PYTHONUNBUFFERED=1
ARG TZ=Asia/Tokyo

# NodeJs version
ARG NODE_ENV="production"
ARG NODE_VERSION=18

# Intel SDK
## renovate: datasource=github-tags packageName=intel/gmmlib versioning=semver
ARG INTEL_GMMLIB_VERSION=intel-gmmlib-22.6.0
## renovate: datasource=github-releases packageName=intel/media-driver
ARG INTEL_MEDIA_DRIVER_VERSION=intel-media-24.3.4
## renovate: datasource=github-releases packageName=intel/libva versioning=semver
ARG INTEL_LIBVA_VERSION=2.22.0
## renovate: datasource=github-tags packageName=intel/libvpl versioning=git
ARG INTEL_LIBVPL_VERSION=v2.14.0
## renovate: datasource=github-releases packageName=intel/vpl-gpu-rt
ARG INTEL_VPL_GPU_RT_VERSION=intel-onevpl-24.3.4

# FFmpeg build dependencies
## renovate: datasource=git-tags packageName=https://code.videolan.org/videolan/dav1d.git versioning=semver
ARG AV1_DAV1D_VERSION=1.5.1
## renovate: datasource=git-tags packageName=https://gitlab.com/AOMediaCodec/SVT-AV1.git versioning=semver
ARG AV1_SVTAV1_VERSION=v2.3.0
## renovate: datasource=github-releases packageName=AviSynth/AviSynthPlus versioning=semver
ARG AVISYNTHPLUS_VERSION=v3.7.3
## renovate: datasource=github-releases packageName=xqq/libaribcaption versioning=semver
ARG LIBARIBCAPTION_VERSION=v1.1.1
## renovate: datasource=github-tags packageName=webmproject/libvpx versioning=semver
ARG LIBVPX_VERSION=v1.15.0
## renovate: datasource=github-releases packageName=xiph/opus versioning=semver
ARG OPUS_VERSION=v1.5.2
## renovate: datasource=github-releases packageName=Netflix/vmaf versioning=semver
ARG VMAF_VERSION=v3.0.0
## renovate: datasource=git-refs packageName=https://code.videolan.org/videolan/x264.git branch=stable versioning=git
ARG X264_VERSION=31e19f92f00c7003fa115047ce50978bc98c3a0d
## renovate: datasource=git-refs packageName=https://bitbucket.org/multicoreware/x265_git.git versioning=semver
ARG X265_VERSION=4.0

# FFmpeg
## renovate: datasource=github-tags packageName=FFmpeg/FFmpeg versioning=semver
ARG FFMPEG_VERSION=n7.1

# Ref: https://github.com/wader/static-ffmpeg/blob/master/Dockerfile
# -O3 makes sure we compile with optimization. setting CFLAGS/CXXFLAGS seems to override
# default automake cflags.
# -static-libgcc is needed to make gcc not include gcc_s as "as-needed" shared library which
# cmake will include as a implicit library.
# other options to get hardened build (same as ffmpeg hardened)
ARG CFLAGS="-O3 -static-libgcc -fno-strict-overflow -fstack-protector-all -fPIC -ffunction-sections -fdata-sections"
ARG CXXFLAGS="-O3 -static-libgcc -fno-strict-overflow -fstack-protector-all -fPIC -ffunction-sections -fdata-sections"
ARG LDFLAGS="-Wl,-z,relro,-z,now -Wl,--gc-sections -Wl,--strip-all -s"

# retry dns and some http codes that might be transient errors
ARG WGET_OPTS="--retry-on-host-error --retry-on-http-error=429,500,502,503"


#- -------------------------------------------------------------------------------------------------
#- Builder
#-
FROM ubuntu:noble AS base
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBIAN_FRONTEND
ARG DEBCONF_NOWARNINGS
ARG PYTHONUNBUFFERED

ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ARG NODE_VERSION

ARG TZ
ENV TZ=${TZ}

ARG PREFIX="/opt/ffmpeg"
# Additional amount only
ENV CPPFLAGS="-I${PREFIX}/include"
ENV LD_LIBRARY_PATH="${PREFIX}/lib"
ENV PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"
ENV PATH="${PREFIX}/bin:${PATH}"

SHELL ["/bin/bash", "-c"]

RUN echo "**** Create directory ****" && \
	set -euxo pipefail && \
	mkdir -p "${PREFIX}" "${PREFIX}-src" "${PREFIX}/bin" "${PREFIX}/include" \
	"${PREFIX}/lib" "${PREFIX}/lib/pkgconfig" "${PREFIX}/src" && \
	echo "{}" > "${PREFIX}/versions.json"

RUN echo "**** Dependencies | base ****" && \
	set -euxo pipefail && \
	apt-get update && \
	apt-get -y upgrade && \
	apt-get -y install --no-install-recommends \
	binutils \
	ca-certificates \
	curl \
	gnupg \
	less \
	tzdata \
	wget \
	# jtv_gen.sh
	bc \
	coreutils \
	fontconfig \
	grep \
	jq \
	mawk \
	&& \
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN echo "**** Dependencies | tsduck ****" && \
	set -euxo pipefail && \
	apt-get update && \
	_tsduckdownload_url="$(curl -sfSL https://api.github.com/repos/tsduck/tsduck/releases/latest | \
	jq -r '.assets[] | select(.name | startswith("tsduck_") and endswith("ubuntu24_amd64.deb")) | .browser_download_url')" && \
	wget "${_tsduckdownload_url}" && \
	apt-get -y install "./$(basename "$_tsduckdownload_url")" && \
	tsp --version && \
	rm -rf "./$(basename "$_tsduckdownload_url")"

RUN echo "**** Dependencies | FFmpeg runtime ****" && \
	set -euxo pipefail && \
	apt-get update && \
	apt-get -y upgrade && \
	apt-get -y install --no-install-recommends \
	# DRM and mp3lame
	libdrm-dev libmp3lame0 \
	# FFmpeg filter drawtext
	fonts-ubuntu libfontconfig1 libfreetype6 libfribidi-dev libharfbuzz-dev \
	&& \
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN echo "**** Dependencies | JLSTSL runtime ****" && \
	set -euxo pipefail && \
	apt-get update && \
	apt-get -y install --no-install-recommends \
	libboost-filesystem-dev \
	libboost-program-options-dev \
	libboost-system-dev \
	# libc6 \
	# libgcc-s1 \
	# libstdc++6 \
	&& \
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN echo "**** Nodejs | setup ****" && \
	set -euxo pipefail && \
	curl -sfSL "https://deb.nodesource.com/setup_${NODE_VERSION}.x" | bash - && \
	apt-get update && \
	apt-get install -y --no-install-recommends \
	nodejs &&\
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN  echo "**** Nodejs | checking ****" && \
	set -euxo pipefail && \
	node -v && \
	npm --version

RUN echo "**** versions.json write ****" && \
	set -euxo pipefail && \
	FONTCONFIG_VERSION=$(dpkg-query -W -f='${Version}\n' fontconfig) \
	FONTS_UBUNTU_VERSION=$(dpkg-query -W -f='${Version}\n' fonts-ubuntu) \
	LIBBOOST_FILESYSTEM_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libboost-filesystem-dev) \
	LIBBOOST_PROGRAM_OPTIONS_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libboost-program-options-dev) \
	LIBBOOST_SYSTEM_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libboost-system-dev) \
	LIBDRM_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libdrm-dev) \
	LIBFONTCONFIG_VERSION=$(dpkg-query -W -f='${Version}\n' libfontconfig1) \
	LIBFREETYPE_VERSION=$(dpkg-query -W -f='${Version}\n' libfreetype6) \
	LIBFRIBIDI_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libfribidi-dev) \
	LIBHARFBUZZ_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libharfbuzz-dev) \
	LIBMP3LAME_VERSION=$(dpkg-query -W -f='${Version}\n' libmp3lame0) \
	NODEJS_VERSION=$(dpkg-query -W -f='${Version}\n' nodejs) \
	TSDUCK_VERSION=$(dpkg-query -W -f='${Version}\n' tsduck) \
	jq -n '{ \
	"fontconfig": env.FONTCONFIG_VERSION, \
	"fonts-ubuntu": env.FONTS_UBUNTU_VERSION, \
	"libboost-filesystem-dev": env.LIBBOOST_FILESYSTEM_DEV_VERSION, \
	"libboost-program-options-dev": env.LIBBOOST_PROGRAM_OPTIONS_DEV_VERSION, \
	"libboost-system-dev": env.LIBBOOST_SYSTEM_DEV, \
	"libdrm-dev": env.LIBDRM_DEV_VERSION, \
	"libfontconfig1": env.LIBFONTCONFIG_VERSION, \
	"libfreetype": env.LIBFREETYPE_VERSION, \
	"libfribidi-dev": env.LIBFRIBIDI_DEV_VERSION, \
	"libharfbuzz-dev": env.LIBHARFBUZZ_DEV_VERSION, \
	"libmp3lame": env.LIBMP3LAME_VERSION, \
	"nodejs": env.NODEJS_VERSION, \
	"tsduck": env.TSDUCK_VERSION, \
	}' > "${PREFIX}/versions_base.json"


#- -------------------------------------------------------------------------------------------------
#- Build Base
#-
FROM base AS build-base
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

RUN echo "**** Build Dependencies ****" && \
	set -eux && \
	apt-get update && \
	apt-get -y install --no-install-recommends \
	apt-file \
	autoconf \
	automake \
	build-essential \
	checkinstall \
	cmake \
	doxygen \
	git-core \
	libtool \
	meson \
	nasm \
	ninja-build \
	pkg-config \
	texinfo \
	xxd \
	yasm \
	zlib1g-dev \
	&& \
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN echo "**** Build Dependencies | FFmpeg ****" && \
	set -euxo pipefail && \
	apt-get update && \
	apt-get -y install --no-install-recommends \
	# libaribcaption and libfreetype
	libfontconfig-dev libfreetype-dev \
	# libmp3lame
	libmp3lame-dev \
	&& \
	\
	# Cleanup \
	apt-get -y autoremove && \
	apt-get -y clean && \
	rm -rf /var/lib/apt/lists/*

RUN echo "**** versions.json write ****" && \
	set -euxo pipefail && \
	LIBFONTCONFIG_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libfontconfig-dev) \
	LIBFREETYPE_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libfreetype-dev) \
	LIBMP3LAME_DEV_VERSION=$(dpkg-query -W -f='${Version}\n' libmp3lame-dev) \
	jq -n '{ \
	"libfontconfig-dev": env.LIBFONTCONFIG_DEV_VERSION, \
	"libfreetype-dev": env.LIBFREETYPE_DEV_VERSION, \
	"libmp3lame-dev": env.LIBMP3LAME_DEV_VERSION, \
	}' > "${PREFIX}/versions_build-base.json"

# Copy scripts
COPY						"scripts/check_static"							"${PREFIX}/bin/check_static"


#- -------------------------------------------------------------------------------------------------
#- Build Intel SDK
#-
FROM build-base AS build-intel-qsv
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

# make options
ARG CFLAGS \
	CXXFLAGS \
	LDFLAGS

# Intel
ARG INTEL_GMMLIB_VERSION \
	INTEL_MEDIA_DRIVER_VERSION \
	INTEL_LIBVA_VERSION \
	INTEL_LIBVPL_VERSION \
	INTEL_VPL_GPU_RT_VERSION

# Copy tools from build-base stage
COPY --from=build-base		"${PREFIX}"										"${PREFIX}"

RUN echo "**** Intel QSV | libva ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b ${INTEL_LIBVA_VERSION} https://github.com/intel/libva.git && \
	cd libva && \
	./autogen.sh \
	--disable-shared \
	--enable-pic \
	--enable-static \
	--libdir="${PREFIX}/lib" \
	--prefix="${PREFIX}" \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists libva && \
	check_static "${PREFIX}/lib/libva.a" permissive && \
	pkg-config --exists libva-drm && \
	check_static "${PREFIX}/lib/libva-drm.a" permissive && \
	cd "${PREFIX}" && \
	mv -v libva "${PREFIX}-src"

RUN echo "**** Intel QSV | gmmlib ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${INTEL_GMMLIB_VERSION}" https://github.com/intel/gmmlib.git && \
	cd gmmlib && \
	mkdir -p build && \
	cd build && \
	cmake -G "Unix Makefiles" \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_STATIC_LIBS=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_C_FLAGS="${CFLAGS}" \
	-DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
	-DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	.. && \
	\
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists igdgmm && \
	check_static "${PREFIX}/lib/libigdgmm.so" permissive && \
	cd "${PREFIX}" && \
	mv -v gmmlib "${PREFIX}-src"

# Ref: https://github.com/intel/media-driver/wiki/Alchemist(DG2)-and-ATSM-Setup
# ENABLE_PRODUCTION_KMD=ON
#   - DG1/SG1（Intel Iris Xe MAX）
#   - DG2/Alchemist（Intel Arc A310, A380, A750, A770）
#   - ATSM（Intel Data Center GPU）
RUN echo "**** Intel QSV | media-driver ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${INTEL_MEDIA_DRIVER_VERSION}" https://github.com/intel/media-driver.git && \
	cd media-driver && \
	mkdir -p build && \
	cd build && \
	cmake -G "Unix Makefiles" \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_STATIC_LIBS=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_C_FLAGS="${CFLAGS}" \
	-DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
	-DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	-DENABLE_PRODUCTION_KMD=ON \
	-DLIBVA_DRIVERS_PATH="${PREFIX}/lib/dri" \
	.. && \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists igfxcmrt && \
	check_static "${PREFIX}/lib/libigfxcmrt.so" permissive && \
	cd "${PREFIX}" && \
	mv -v media-driver "${PREFIX}-src"

RUN echo "**** Intel QSV | libvpl ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${INTEL_LIBVPL_VERSION}" https://github.com/intel/libvpl.git && \
	cd libvpl && \
	cmake -B build \
	-G"Unix Makefiles" \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_STATIC_LIBS=ON \
	-DBUILD_TESTS=OFF \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	-DCMAKE_VERBOSE_MAKEFILE=ON \
	-DENABLE_WARNING_AS_ERROR=ON \
	&& \
	cmake --build build -j$(nproc) && \
	cmake --install build && \
	cmake --build build --target clean && \
	\
	pkg-config --exists vpl && \
	check_static "${PREFIX}/lib/libvpl.a" permissive && \
	cd "${PREFIX}" && \
	mv -v libvpl "${PREFIX}-src"

RUN echo "**** Intel QSV | VPL Runtime ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${INTEL_VPL_GPU_RT_VERSION}" https://github.com/intel/vpl-gpu-rt.git && \
	cd vpl-gpu-rt && \
	mkdir -p build && cd build && \
	cmake -G "Unix Makefiles" \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_STATIC_LIBS=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_LIBDIR="${PREFIX}/lib" \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	.. && \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists libmfx-gen && \
	check_static "${PREFIX}/lib/libmfx-gen.so" permissive && \
	cd "${PREFIX}" && \
	mv -v vpl-gpu-rt "${PREFIX}-src"

RUN echo "**** Intel QSV | versions.json write ****" && \
	set -euxo pipefail && \
	jq -n '{ \
	"libigdgmm": env.INTEL_GMMLIB_VERSION, \
	"libigfxcmrt": env.INTEL_MEDIA_DRIVER_VERSION, \
	"libmfx-gen": env.INTEL_VPL_GPU_RT_VERSION, \
	"libva-drm": env.INTEL_LIBVA_VERSION, \
	"libva": env.INTEL_LIBVA_VERSION, \
	"libvpl": env.INTEL_LIBVPL_VERSION, \
	}' > "${PREFIX}/versions_qsv.json"


#- -------------------------------------------------------------------------------------------------
#- Build library
#-
FROM build-base AS build-library
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

# make options
ARG CFLAGS \
	CXXFLAGS \
	LDFLAGS

ARG AV1_DAV1D_VERSION \
	AV1_SVTAV1_VERSION \
	AVISYNTHPLUS_VERSION \
	LIBARIBCAPTION_VERSION \
	LIBVPX_VERSION \
	OPUS_VERSION \
	VMAF_VERSION \
	X264_VERSION \
	X265_VERSION

# Copy tools from build-base stage
COPY --from=build-base		"${PREFIX}"										"${PREFIX}"

RUN echo "**** library | dav1d ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${AV1_DAV1D_VERSION}" https://code.videolan.org/videolan/dav1d.git && \
	cd dav1d && \
	meson setup build \
	--buildtype=release \
	--default-library=static \
	--prefix="${PREFIX}" \
	--libdir="${PREFIX}/lib" \
	-Denable_tests=false \
	-Denable_tools=false \
	&& \
	ninja -vC build -j$(nproc) && \
	ninja -vC build install && \
	ninja -vC build -t clean && \
	\
	pkg-config --exists dav1d && \
	check_static "${PREFIX}/lib/libdav1d.a" permissive && \
	cd "${PREFIX}" && \
	mv -v dav1d "${PREFIX}-src"

RUN echo "**** library | SVT-AV1 ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${AV1_SVTAV1_VERSION}" https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
	mkdir SVT-AV1/build && \
	cd SVT-AV1/build && \
	cmake -G "Unix Makefiles" \
	-DBUILD_DEC=OFF \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_STATIC_LIBS=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	.. && \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists SvtAv1Enc && \
	check_static "${PREFIX}/lib/libSvtAv1Enc.a" permissive && \
	cd "${PREFIX}" && \
	mv -v SVT-AV1 "${PREFIX}-src"

RUN echo "**** library | libaribcaption ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${LIBARIBCAPTION_VERSION}" https://github.com/xqq/libaribcaption.git && \
	cd libaribcaption && \
	mkdir build && cd build && \
	cmake .. \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	-DBUILD_SHARED_LIBS=OFF \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists libaribcaption && \
	check_static "${PREFIX}/lib/libaribcaption.a" permissive && \
	cd "${PREFIX}" && \
	mv -v libaribcaption "${PREFIX}-src"

RUN echo "**** library | libvpx ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${LIBVPX_VERSION}" https://github.com/webmproject/libvpx.git && \
	cd libvpx && \
	./configure \
	--prefix="${PREFIX}" \
	--libdir="${PREFIX}/lib" \
	--disable-debug \
	--disable-docs \
	--disable-examples \
	--disable-install-bins \
	--enable-static \
	--enable-small \
	--disable-unit-tests \
	--enable-pic \
	--disable-shared \
	--enable-vp8 \
	--enable-vp9 \
	--enable-vp9-highbitdepth \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists vpx && \
	check_static "${PREFIX}/lib/libvpx.a" permissive && \
	cd "${PREFIX}" && \
	mv -v libvpx "${PREFIX}-src"

RUN echo "**** library | opus ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${OPUS_VERSION}" https://github.com/xiph/opus.git && \
	cd opus && \
	autoreconf -fiv && \
	./configure \
	--prefix="${PREFIX}" \
	--libdir="${PREFIX}/lib" \
	--enable-static \
	--disable-shared \
	--with-pic \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists opus && \
	check_static "${PREFIX}/lib/libopus.a" permissive && \
	cd "${PREFIX}" && \
	mv -v opus "${PREFIX}-src"

RUN echo "**** library | libvmaf ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${VMAF_VERSION}" https://github.com/Netflix/vmaf.git && \
	cd vmaf/libvmaf && \
	meson setup build \
	--buildtype=release \
	--default-library=static \
	--prefix="${PREFIX}" \
	--libdir="${PREFIX}/lib" \
	-Dbuilt_in_models=true \
	-Denable_avx512=true \
	-Denable_docs=false \
	-Denable_float=true \
	&& \
	ninja -vC build -j$(nproc) && \
	ninja -vC build install && \
	ninja -vC build -t clean && \
	sed -i 's/-lvmaf /-lvmaf -lstdc++ /' "${PREFIX}/lib/pkgconfig/libvmaf.pc" && \
	\
	pkg-config --exists libvmaf && \
	check_static "${PREFIX}/lib/libvmaf.a" permissive && \
	cd "${PREFIX}" && \
	mv -v vmaf* "${PREFIX}-src"

RUN echo "**** library | x264 ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	mkdir -p x264 && \
	cd x264 && \
	git init && \
	git remote add origin https://code.videolan.org/videolan/x264.git && \
	git fetch --depth 1 origin "${X264_VERSION}" && \
	git checkout FETCH_HEAD && \
	./configure \
	--prefix="${PREFIX}" \
	--libdir="${PREFIX}/lib" \
	--disable-cli \
	--enable-static \
	--enable-pic \
	--disable-shared \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists x264 && \
	check_static "${PREFIX}/lib/libx264.a" permissive && \
	cd "${PREFIX}" && \
	mv -v x264 "${PREFIX}-src"

RUN echo "**** library | x265 ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${X265_VERSION}" https://bitbucket.org/multicoreware/x265_git.git x265 && \
	cd x265/build/linux && \
	sed -i '/^[[:space:]]*cmake / s/$/ -G "Unix Makefiles" ${CMAKEFLAGS}/' ./multilib.sh && \
	sed -i 's/ -DENABLE_SHARED=OFF//g' ./multilib.sh && \
	MAKEFLAGS="-j$(nproc)" \
	CMAKEFLAGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${PREFIX} \
	-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
	-DENABLE_AGGRESSIVE_CHECKS:BOOL=ON -DENABLE_NASM:BOOL=ON \
	-DENABLE_SHARED:BOOL=OFF -DSTATIC_LIB:BOOL=ON" \
	./multilib.sh && \
	# The following make install might be redundant if multilib.sh already handles it with new CMAKEFLAGS
	# However, keeping it for now to ensure the original build flow for 8bit is attempted.
	make -C 8bit -j$(nproc) install && \
	\
	pkg-config --exists x265 && \
	check_static "${PREFIX}/lib/libx265.a" permissive && \
	cd "${PREFIX}" && \
	mv -v x265 "${PREFIX}-src"

RUN echo "**** library | AviSynth+ ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${AVISYNTHPLUS_VERSION}" https://github.com/AviSynth/AviSynthPlus.git && \
	cd AviSynthPlus && \
	\
	mkdir avisynth-build && \
	cd avisynth-build && \
	cmake ../ -G Ninja \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_INSTALL_PREFIX="${PREFIX}" \
	&& \
	ninja -v -j$(nproc) && \
	ninja -v install && \
	ninja -v -t clean && \
	\
	pkg-config --exists avisynth && \
	check_static "${PREFIX}/lib/libavisynth.so" permissive && \
	check_static "${PREFIX}/lib/avisynth/libconvertstacked.so" permissive && \
	check_static "${PREFIX}/lib/avisynth/libshibatch.so" permissive && \
	check_static "${PREFIX}/lib/avisynth/libtimestretch.so" permissive && \
	cd "${PREFIX}" && \
	mv -v AviSynthPlus "${PREFIX}-src"

RUN echo "**** library | versions.json write ****" && \
	set -euxo pipefail && \
	LIBCONVERTSTACKED_VERSION=$(pkg-config --modversion libconvertstacked) \
	LIBSHIBATCH_VERSION=$(pkg-config --modversion libshibatch) \
	LIBTIMESTRETCH_VERSION=$(pkg-config --modversion libtimestretch) \
	\
	jq -n '{ \
	"libaribcaption": env.LIBARIBCAPTION_VERSION, \
	"libavisynth": env.AVISYNTHPLUS_VERSION, \
	"libconvertstacked": env.LIBCONVERTSTACKED_VERSION, \
	"libdav1d": env.AV1_DAV1D_VERSION, \
	"libopus": env.OPUS_VERSION, \
	"libshibatch": env.LIBSHIBATCH_VERSION, \
	"libSvtAv1Enc": env.AV1_SVTAV1_VERSION, \
	"libtimestretch": env.LIBTIMESTRETCH_VERSION, \
	"libvmaf": env.VMAF_VERSION, \
	"libvpx": env.LIBVPX_VERSION, \
	"libx264": env.X264_VERSION, \
	"libx265": env.X265_VERSION, \
	}' > "${PREFIX}/versions_library.json"


#- -------------------------------------------------------------------------------------------------
#- Build ffmpeg
#-
FROM build-base AS build-ffmpeg
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

# make options
ARG CFLAGS \
	CXXFLAGS \
	LDFLAGS

# Copy tools from build-* stage
COPY --from=build-intel-qsv	"${PREFIX}"										"${PREFIX}"
COPY --from=build-library	"${PREFIX}"										"${PREFIX}"

## FFmpeg
# ldfalgs -Wl,--allow-multiple-definition is a workaround for linking with multiple rust staticlib to
# not cause collision in toolchain symbols, see comment in checkdupsym script for details.
# Ref: https://github.com/wader/static-ffmpeg/blob/master/Dockerfile
ARG FFMPEG_VERSION
RUN echo "**** FFmpeg ****" && \
	# force 'set -eux'
	set -eux && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${FFMPEG_VERSION}" https://github.com/FFmpeg/FFmpeg.git "ffmpeg-${FFMPEG_VERSION}" && \
	set +u && \
	echo "=== Build Environment ===" && \
	echo "= Compile settings" && \
	echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}" && \
	echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}" && \
	echo "" && \
	echo "= Build systems" && \
	echo "CFLAGS:          ${CFLAGS}" && \
	echo "CPPFLAGS:        ${CPPFLAGS}" && \
	echo "CXXFLAGS:        ${CXXFLAGS}" && \
	echo "LDFLAGS:         ${LDFLAGS}" && \
	echo "=========================" && \
	set -u && \
	\
	cd "ffmpeg-${FFMPEG_VERSION}" && \
	./configure \
	# License
	--enable-gpl \
	# --enable-nonfree \  # https://www.ffmpeg.org/legal.html
	--enable-version3 \
	\
	# encoder & decoder
	--enable-avisynth \
	--enable-libaribcaption \
	--enable-libdav1d \
	--enable-libfontconfig \
	--enable-libfreetype \
	--enable-libfribidi \
	--enable-libharfbuzz \
	--enable-libmp3lame \
	--enable-libopus \
	--enable-libsvtav1 \
	--enable-libvmaf \
	--enable-libvpl \
	--enable-libvpx \
	--enable-libx264 \
	--enable-libx265 \
	--enable-vaapi \
	\
	# small binary & static build
	--disable-debug \
	--disable-doc \
	--disable-ffplay \
	--disable-shared \
	--enable-small \
	--enable-static \
	--enable-stripping \
	\
	# DO NOT USE "--static" with --extra-cflags, --extra-ldflags because l-smash cannot be dynamically loaded.
	--extra-cflags="-fopenmp" \
	--extra-ldflags="-fopenmp -Wl,--allow-multiple-definition" \
	--extra-libs="-lpthread -lm" \
	--ld="g++" \
	--pkg-config-flags="--static" \
	--prefix="${PREFIX}" \
	--toolchain=hardened \
	2>&1 | tee ffmpeg_configure.log && tail -n 20 ffbuild/config.log && \
	\
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists libavutil && \
	check_static "${PREFIX}/lib/libavutil.a" strict && \
	pkg-config --exists libavcodec && \
	check_static "${PREFIX}/lib/libavcodec.a" strict && \
	pkg-config --exists libswresample && \
	check_static "${PREFIX}/lib/libswresample.a" strict && \
	pkg-config --exists libavformat && \
	check_static "${PREFIX}/lib/libavformat.a" strict && \
	pkg-config --exists libavfilter && \
	check_static "${PREFIX}/lib/libavfilter.a" strict && \
	pkg-config --exists libavdevice && \
	check_static "${PREFIX}/lib/libavdevice.a" strict && \
	pkg-config --exists libswscale && \
	check_static "${PREFIX}/lib/libswscale.a" strict && \
	cd "${PREFIX}" && \
	mv -v "ffmpeg-${FFMPEG_VERSION}" "${PREFIX}-src"

RUN echo "**** ffmpeg | versions.json write ****" && \
	set -euxo pipefail && \
	jq -n '{ \
	"ffmpeg": env.FFMPEG_VERSION, \
	}' > "${PREFIX}/versions_ffmpeg.json"


#- -------------------------------------------------------------------------------------------------
#- Build ffmpeg
#-
FROM build-base AS build-jlstsl
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

# make options
ARG CFLAGS \
	CXXFLAGS \
	LDFLAGS

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WARNING <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
## Due to code agreements with l-smash and L-SMASH-Works,
## use with FFmpeg 7.0.0 or higher is unstable, so the version will be fixed.
## Ref: https://github.com/dwbuiten/obuparse/commits/master/
ARG JLSTSL_OBUPARSE_VERSION=478adcc872d5a8a19443e87910508e261a0a60ba

## FFmpeg
### Ref: https://github.com/FFmpeg/FFmpeg/tags
ARG JLSTSL_FFMPEG_VERSION=n6.1.2

## L-SMASH
ARG JLSTSL_LSMASH_URL=https://github.com/vimeo/l-smash.git
ARG JLSTSL_LSMASH_VERSION=62a93fb6a23b013d38f30fcb827c2abda69ee3d1

## L-SMASH-Works
ARG JLSTSL_LSMASHWORKS_URL=https://github.com/HomeOfAviSynthPlusEvolution/L-SMASH-Works.git
ARG JLSTSL_LSMASHWORKS_VERSION=1170.0.0.0
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WARNING <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

COPY --from=build-library	"${PREFIX}"										"${PREFIX}"

## FFmpeg
# ldfalgs -Wl,--allow-multiple-definition is a workaround for linking with multiple rust staticlib to
# not cause collision in toolchain symbols, see comment in checkdupsym script for details.
# Ref: https://github.com/wader/static-ffmpeg/blob/master/Dockerfile
RUN echo "**** JLSTSL | FFmpeg ****" && \
	# force 'set -eux'
	set -eux && \
	cd "${PREFIX}" && \
	git clone --depth 1 -b "${JLSTSL_FFMPEG_VERSION}" https://github.com/FFmpeg/FFmpeg.git ffmpeg-jlstsl && \
	set +u && \
	echo "=== Build Environment ===" && \
	echo "= Compile settings" && \
	echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}" && \
	echo "PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}" && \
	echo "" && \
	echo "= Build systems" && \
	echo "CFLAGS:          ${CFLAGS}" && \
	echo "CPPFLAGS:        ${CPPFLAGS}" && \
	echo "CXXFLAGS:        ${CXXFLAGS}" && \
	echo "LDFLAGS:         ${LDFLAGS}" && \
	echo "=========================" && \
	set -u && \
	\
	cd ffmpeg-jlstsl && \
	./configure \
	--disable-programs \
	--disable-encoders \
	--disable-decoders \
	--enable-decoder={aac,aac_fixed,aac_latm,avs,avui,mpeg2_v4l2m2m,mpeg2video,mpegvideo} \
	\
	--disable-hwaccels \
	--disable-muxers \
	--disable-demuxers \
	--enable-demuxer={aac,avs,avs2,avs3,mpegts,mpegtsraw} \
	\
	--disable-parsers \
	# Unable to build av1 exclude
	--enable-parser={aac,av1,avs2,avs3,mpegaudio,mpegvideo} \
	\
	--disable-bsfs \
	--enable-bsf=aac_adtstoasc \
	\
	--disable-protocols \
	--enable-protocol=file \
	\
	--disable-indevs \
	--disable-outdevs \
	--disable-devices \
	--disable-filters \
	\
	# License
	--enable-gpl \
	# --enable-nonfree \  # https://www.ffmpeg.org/legal.html
	--enable-version3 \
	\
	# small binary & static build
	--disable-debug \
	--disable-doc \
	--disable-ffplay \
	--disable-shared \
	--enable-small \
	--enable-static \
	--enable-stripping \
	\
	--extra-cflags="-static -fopenmp" \
	--extra-ldflags="-static -fopenmp -Wl,--allow-multiple-definition" \
	--extra-libs="-lpthread -lm" \
	--ld="g++" \
	--pkg-config-flags="--static" \
	--prefix="${PREFIX}" \
	--toolchain=hardened \
	2>&1 | tee ffmpeg_configure.log && tail -n 20 ffbuild/config.log && \
	\
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists libavutil && \
	check_static "${PREFIX}/lib/libavutil.a" strict && \
	pkg-config --exists libavcodec && \
	check_static "${PREFIX}/lib/libavcodec.a" strict && \
	pkg-config --exists libswresample && \
	check_static "${PREFIX}/lib/libswresample.a" strict && \
	pkg-config --exists libavformat && \
	check_static "${PREFIX}/lib/libavformat.a" strict && \
	pkg-config --exists libavfilter && \
	check_static "${PREFIX}/lib/libavfilter.a" strict && \
	pkg-config --exists libavdevice && \
	check_static "${PREFIX}/lib/libavdevice.a" strict && \
	pkg-config --exists libswscale && \
	check_static "${PREFIX}/lib/libswscale.a" strict && \
	cd "${PREFIX}" && \
	mv -v ffmpeg-jlstsl "${PREFIX}-src"

## obuparse
RUN echo "**** JLSTSL | obuparse | build ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	mkdir -p obuparse && \
	cd obuparse && \
	git init && \
	git remote add origin https://github.com/dwbuiten/obuparse.git && \
	git fetch --depth 1 origin "${JLSTSL_OBUPARSE_VERSION}" && \
	git checkout FETCH_HEAD && \
	\
	make -j$(nproc) PREFIX=${PREFIX} libobuparse.a && \
	make PREFIX=${PREFIX} install-static && \
	make clean && \
	\
	cd "${PREFIX}" && \
	mv -v obuparse "${PREFIX}-src"

RUN <<EOF
echo "**** JLSTSL | obuparse | pkgconfig ****"
set -euxo pipefail

cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/obuparse.pc
prefix=${PREFIX}
includedir=\${prefix}/include

Name: obuparse
Description: A simple and portable single file AV1 OBU parser.
Version: ${JLSTSL_OBUPARSE_VERSION}

Cflags: -I\${includedir}
_DOC_
EOF

RUN echo "**** JLSTSL | obuparse | check ****" && \
	set -euxo pipefail && \
	pkg-config --exists obuparse && \
	check_static "${PREFIX}/lib/libobuparse.a" permissive

## l-smash
RUN echo "**** JLSTSL | l-smash ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	mkdir -p l-smash && \
	cd l-smash && \
	git init && \
	git remote add origin "${JLSTSL_LSMASH_URL}" && \
	git fetch --depth 1 origin "${JLSTSL_LSMASH_VERSION}" && \
	git checkout FETCH_HEAD && \
	./configure \
	--extra-cflags="${CFLAGS} -I${PREFIX}/include" \
	--extra-ldflags="-L${PREFIX}/lib" \
	--prefix="${PREFIX}" \
	&& \
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	pkg-config --exists liblsmash && \
	check_static "${PREFIX}/lib/liblsmash.a" permissive && \
	cd "${PREFIX}" && \
	mv -v l-smash "${PREFIX}-src"

## L-SMASH-Works
RUN echo "**** JLSTSL | L-SMASH-Works | build ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}" && \
	mkdir -p L-SMASH-Works && \
	cd L-SMASH-Works && \
	git init && \
	git remote add origin "${JLSTSL_LSMASHWORKS_URL}" && \
	git fetch --depth 1 origin "${JLSTSL_LSMASHWORKS_VERSION}" && \
	git checkout FETCH_HEAD && \
	cd AviSynth && \
	LDFLAGS="-Wl,-Bsymbolic" meson build && \
	cd build && \
	ninja -v && \
	ninja install && \
	ninja -v -t clean && \
	\
	cd "${PREFIX}" && \
	mv -v L-SMASH-Works "${PREFIX}-src"

RUN <<EOF
echo "**** JLSTSL | L-SMASH-Works | pkgconfig ****"
cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/liblsmashsource.pc
Name: L-SMASH-Works
Description: Note about LSMASHVideoSource and LibavSMASHSource.
Version: ${JLSTSL_LSMASHWORKS_VERSION}

Libs: -L${PREFIX}/lib/avisynth -llsmashsource \
      -L${PREFIX}/lib -lavformat -lavcodec -lavutil \
      -lswscale -lswresample -llsmash

_DOC_
EOF

RUN echo "**** JLSTSL | L-SMASH-Works | check ****" && \
	set -euxo pipefail && \
	pkg-config --exists liblsmashsource && \
	check_static "${PREFIX}/lib/avisynth/liblsmashsource.so" permissive

#- -----------------------------------------------------------------------------
#- Build JoinLogoScpTrialSetLinux
#-

COPY						modules											"${PREFIX}-src/JLSTSL/modules"
ARG _JLSTLDIR="${PREFIX}-src/JLSTSL/modules/join_logo_scp_trial"
ARG _BINDIR="${PREFIX}-src/JLSTSL/modules/join_logo_scp_trial"
RUN echo "**** JLSTSL | chapter_exe ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/chapter_exe/src" && \
	\
	make -j$(nproc) && \
	make PREFIX="${_JLSTLDIR}" install && \
	make clean && \
	check_static "${_JLSTLDIR}/bin/chapter_exe" strict

RUN echo "**** JLSTSL | logoframe ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/logoframe/src" && \
	\
	make -j$(nproc) && \
	make PREFIX="${_JLSTLDIR}" install && \
	make clean && \
	\
	check_static "${_JLSTLDIR}/bin/logoframe" strict

RUN echo "**** JLSTSL | join_logo_scp ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/join_logo_scp/src" && \
	\
	make -j$(nproc) && \
	make PREFIX="${_JLSTLDIR}" install && \
	make clean && \
	\
	check_static "${_JLSTLDIR}/bin/join_logo_scp" strict

RUN echo "**** JLSTSL | tsdivider ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/tsdivider/" && \
	mkdir -p build && cd build && \
	cmake -G "Unix Makefiles" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_C_FLAGS="${CFLAGS}" \
	-DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
	-DCMAKE_INSTALL_PREFIX="${_JLSTLDIR}" \
	-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	.. && \
	\
	make -j$(nproc) && \
	make install && \
	make clean && \
	\
	check_static "${_JLSTLDIR}/bin/tsdivider" strict

RUN echo "**** JLSTSL | delogo ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/delogo/src" && \
	\
	make -j$(nproc) && \
	make PREFIX="${PREFIX}/lib/avisynth" install && \
	make clean && \
	\
	check_static "${PREFIX}/lib/avisynth/libdelogo.so" strict

RUN echo "**** JLSTSL | join_logo_scp_trial ****" && \
	set -euxo pipefail && \
	cd "${PREFIX}-src/JLSTSL/modules/join_logo_scp_trial" && \
	node -v && \
	npm --version && \
	npm install --no-save --loglevel=info --omit=dev

RUN echo "**** JLSTSL | Copy directory ****" && \
	set -euxo pipefail && \
	mv -v ${PREFIX}-src/JLSTSL/modules/join_logo_scp_trial /join_logo_scp_trial && \
	rm -rf /join_logo_scp_trial/JL && \
	cp -av "${PREFIX}-src/JLSTSL/modules/join_logo_scp/JL" /join_logo_scp_trial/ && \
	test -f /join_logo_scp_trial/JL/data/ChList.csv && \
	\
	cd /join_logo_scp_trial && \
	npm link

RUN echo "**** JLSTSL | versions.json write ****" && \
	set -euxo pipefail && \
	jq -n '. + { \
	"ffmpeg-jlstsl": env.JLSTSL_FFMPEG_VERSION, \
	"liblsmash": env.JLSTSL_LSMASH_VERSION, \
	"liblsmashsource": env.JLSTSL_LSMASHWORKS_VERSION, \
	"libobuparse": env.JLSTSL_OBUPARSE_VERSION, \
	}' > "${PREFIX}/versions_jlstsl.json"


#- -------------------------------------------------------------------------------------------------
#- Runner
#-
FROM base AS runner
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PREFIX
ARG PYTHONUNBUFFERED

#- -----------------------------------------------------------------------------
#- FFmpeg
#-
## FFmpeg
COPY --from=build-ffmpeg	"${PREFIX}"										"${PREFIX}"

## JLSTSL
COPY --from=build-jlstsl	"${PREFIX}/lib/liblsmash.a"						"${PREFIX}/lib"
COPY --from=build-jlstsl	"${PREFIX}/lib/libobuparse.a"					"${PREFIX}/lib"
COPY --from=build-jlstsl	"${PREFIX}/lib/avisynth/libconvertstacked.so"	"${PREFIX}/lib/avisynth"
COPY --from=build-jlstsl	"${PREFIX}/lib/avisynth/libdelogo.so"			"${PREFIX}/lib/avisynth"
COPY --from=build-jlstsl	"${PREFIX}/lib/avisynth/liblsmashsource.so"		"${PREFIX}/lib/avisynth"
COPY --from=build-jlstsl	"${PREFIX}/lib/avisynth/libshibatch.so"			"${PREFIX}/lib/avisynth"
COPY --from=build-jlstsl	"${PREFIX}/lib/avisynth/libtimestretch.so"		"${PREFIX}/lib/avisynth"

RUN echo "**** FFmpeg | versions.json ****" && \
	set -euxo pipefail && \
	jq -s 'add' "${PREFIX}/versions_*.json" > "${PREFIX}/versions.json"

RUN echo "**** FFmpeg | check exec ****" && \
	set -euxo pipefail && \
	ls -lah "${PREFIX}/lib" && \
	ls -lah "${PREFIX}/lib/avisynth" && \
	ln -s "${PREFIX}/bin/ffprobe" "/usr/local/bin/ffprobe" && \
	ln -s "${PREFIX}/bin/ffmpeg" "/usr/local/bin/ffmpeg" && \
	check_static "/usr/local/bin/ffprobe" && \
	check_static "/usr/local/bin/ffmpeg" && \
	ffmpeg -version

RUN echo  "**** FFmpeg | check library ****" && \
	set -euxo pipefail && \
	ffmpeg -hide_banner -hwaccels && \
	ffmpeg -hide_banner -buildconf && \
	for i in decoders encoders; do echo ${i}:; ffmpeg -hide_banner -${i} | \
	egrep -i "[x|h]264|[x|h]265|av1|cuvid|hevc|libmfx|nv[dec|enc]|qsv|vaapi|vp9"; done

RUN <<EOF
echo "**** FFmpeg | encoder ****"
set -euo pipefail

for codec in "libx264" "libx265" "libsvtav1" "libvpx" "libvpx-vp9" "mpeg2video"
do
    echo "=============== codec:v ${codec} ==============="
    set -x
    ffmpeg -loglevel error -f lavfi -i testsrc2=size=1920x1080:rate=29.97:duration=0.5 -c:v ${codec} -f null -
    set +x
done

for codec in "aac" "flac" "libmp3lame" "libopus"
do
    echo "=============== codec:a ${codec} ==============="
    set -x
    ffmpeg -f lavfi -i sine=220:4:d=5 -f lavfi -i sine=220:0:d=5 -filter_complex amerge=2 -c:a aac -f null -
    set +x
done

echo "=============== AviSynth test ==============="
# Create test video file for L-SMASH-Works testing
ffmpeg -f lavfi -i testsrc2=size=640x480:rate=29.97:duration=2 -f lavfi -i sine=frequency=1000:sample_rate=48000:duration=2 -c:v libx264 -preset ultrafast -c:a aac /tmp/test_input.mp4

# Verify test file was created and check its properties
ls -la /tmp/test_input.mp4
ffprobe -v quiet -show_format -show_streams /tmp/test_input.mp4

# Create AviSynth test script using LWLibavVideoSource and AudioDub (L-SMASH-Works)
cat > /tmp/test_lsmash.avs << AVS_EOF
# Test L-SMASH-Works functionality
# Load plugin explicitly if needed
LoadPlugin("${PREFIX}/lib/avisynth/liblsmashsource.so")

# Simple test - load video and audio separately
video = LWLibavVideoSource("/tmp/test_input.mp4")
audio = LWLibavAudioSource("/tmp/test_input.mp4")
AudioDub(video, audio)
Trim(0, 29)
AVS_EOF

# Also create a fallback test that just tests the plugin loading
cat > /tmp/test_fallback.avs << AVS_EOF
# Fallback test - just test if plugin loads and functions exist
LoadPlugin("${PREFIX}/lib/avisynth/liblsmashsource.so")
# Use ColorBars as fallback
ColorBars(640, 480)
Trim(0, 29)
AVS_EOF

# Debug: show the AviSynth script content and file info
echo "=== Test file info ==="
ls -la /tmp/test_input.mp4
echo "=== AviSynth script content ==="
cat /tmp/test_lsmash.avs
echo "================================"

# Test L-SMASH-Works functionality
echo "Testing L-SMASH-Works with verbose logging..."
set -x
if ! ffmpeg -loglevel info -i /tmp/test_lsmash.avs -c:v libx264 -preset ultrafast -t 1 -f null -; then
    echo "Primary L-SMASH-Works test failed, trying fallback test (plugin loading only)..."
    ffmpeg -loglevel info -i /tmp/test_fallback.avs -c:v libx264 -preset ultrafast -t 1 -f null -
fi
set +x

# Cleanup
rm -f /tmp/test_input.mp4 /tmp/test_lsmash.avs /tmp/test_fallback.avs

EOF

#- -----------------------------------------------------------------------------
#- jlse
#-
# Copy scripts
COPY						"scripts/test_jlse"								"${PREFIX}/bin/test_jlse"
COPY --from=build-jlstsl	/join_logo_scp_trial							/join_logo_scp_trial
RUN echo  "**** jlse | check exec  ****" && \
	set -euxo pipefail && \
	cd /join_logo_scp_trial && \
	npm link && \
	jlse --help

ENTRYPOINT []
CMD [ "/bin/bash" ]

# vim: set filetype=dockerfile:
