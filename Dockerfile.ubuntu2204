# syntax=docker/dockerfile:1
#- -------------------------------------------------------------------------------------------------
#- Global
#-
ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NOWARNINGS=yes
ARG PYTHONUNBUFFERED=1
ARG TZ=Asia/Tokyo

# NodeJs version
ARG NODE_VERSION=18

# AviSynthPlus
## Ref: https://github.com/AviSynth/AviSynthPlus/releases
ARG AVISYNTHPLUS_VERSION=v3.7.3

# l-smash
## Ref: https://github.com/Mr-Ojii/l-smash
ARG LSMASH_VERSION=315b4747d759e336ef30b18e93f2e676810e5a73
## Ref: https://github.com/Mr-Ojii/L-SMASH-Works
ARG LSMASHWORKS_VERSION=2119ea45f248f2c53946e34bfe88728aa770464f

## Ref: https://github.com/dwbuiten/obuparse
ARG OBUPARSE_VERSION=478adcc872d5a8a19443e87910508e261a0a60ba

# FFmpeg
## Ref: https://ffmpeg.org/releases/
ARG FFMPEG_VERSION=7.1

## Ref: https://github.com/intel/libva/releases
ARG LIBVA_VERSION=2.22.0

## Ref: https://github.com/intel/libvpl
ARG INTEL_LIBVPL_VERSION=v2.14.0

## Ref: https://github.com/intel/vpl-gpu-rt
ARG INTEL_VPL_GPU_RT_VERSION=intel-onevpl-24.3.4

# retry dns and some http codes that might be transient errors
ARG WGET_OPTS="--retry-on-host-error --retry-on-http-error=429,500,502,503"

#- -------------------------------------------------------------------------------------------------
#- Builder
#-
FROM ubuntu:noble AS base
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBIAN_FRONTEND
ARG DEBCONF_NOWARNINGS
ARG PYTHONUNBUFFERED

ARG NODE_VERSION

ARG TZ
ENV TZ=${TZ}

SHELL ["/bin/bash", "-c"]

# Dependencies
RUN set -eux && \
    apt-get update && \
    apt-get -y upgrade && \
    apt-get -y install --no-install-recommends \
    binutils \
    ca-certificates \
    curl \
    gnupg \
    less \
    tzdata \
    wget && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

## Nodejs setup
RUN set -eux && \
    curl -fsSL "https://deb.nodesource.com/setup_${NODE_VERSION}.x" | bash - && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    nodejs &&\
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

## Nodejs setup
RUN set -eux && \
    node -v && \
    npm --version


#- -------------------------------------------------------------------------------------------------
#- Build ffmpeg
#-
FROM base AS build-ffmpeg
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PYTHONUNBUFFERED
ARG WGET_OPTS

ARG PREFIX="/opt/ffmpeg"
ENV LD_LIBRARY_PATH="${PREFIX}/lib:/opt/modules/lib:/usr/local/lib"
ENV PKG_CONFIG_PATH="${PREFIX}/share/pkgconfig:${PREFIX}/lib/pkgconfig:/opt/modules/lib/pkgconfig"

# AviSynthPlus
ARG AVISYNTHPLUS_VERSION
ARG LSMASH_VERSION
ARG LSMASHWORKS_VERSION
ARG OBUPARSE_VERSION

# VMAF
## Ref: https://github.com/Netflix/vmaf/releases
ARG VMAF_VERSION=3.0.0
ARG VMAF_URL="https://github.com/Netflix/vmaf/archive/refs/tags/v${VMAF_VERSION}.tar.gz"
ARG VMAF_SHA256=7178c4833639e6b989ecae73131d02f70735fdb3fc2c7d84bc36c9c3461d93b1

# FFmpeg
ARG FFMPEG_VERSION
ARG FFMPEG_URL="https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2"
ARG INTEL_LIBVPL_VERSION
ARG INTEL_VPL_GPU_RT_VERSION
ARG LIBVA_VERSION

# Create directory
RUN set -eux && mkdir -p "${PREFIX}" "${PREFIX}/bin" "${PREFIX}/include" "${PREFIX}/lib" "${PREFIX}/lib/pkgconfig" "${PREFIX}/src"

# Build Dependencies
RUN set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    apt-file \
    autoconf \
    automake \
    build-essential \
    ca-certificates \
    checkinstall \
    cmake \
    curl \
    git-core \
    gnupg \
    libass-dev \
    libboost-all-dev \
    libfdk-aac-dev \
    libfreetype6-dev \
    libgnutls28-dev \
    libmp3lame-dev \
    libtool \
    libunistring-dev \
    libx264-dev \
    meson \
    ninja-build \
    pkg-config \
    texinfo \
    wget \
    yasm \
    zlib1g-dev
# Do not apt clean to resolve dependencies

## Create Working directory
RUN mkdir -p "${PREFIX}"

## VMAF
RUN apt-get -y install --no-install-recommends doxygen xxd

## NASM
RUN apt-get -y install --no-install-recommends nasm

## libx264
RUN apt-get -y install --no-install-recommends libx264-dev

## libx265
RUN apt-get -y install --no-install-recommends libx265-dev libnuma-dev

## libfdk-aac
RUN apt-get -y install --no-install-recommends libfdk-aac-dev

## libaom
RUN apt-get -y install --no-install-recommends libaom-dev libdav1d-dev

## libaribb24
RUN apt-get -y install --no-install-recommends libaribb24-dev

## avisynth+
RUN apt-get -y install --no-install-recommends checkinstall

## libvmaf
RUN set -eux && \
    cd "${PREFIX}" && \
    wget ${WGET_OPTS} -O vmaf.tar.gz "${VMAF_URL}" && \
    echo "${VMAF_SHA256}  vmaf.tar.gz" | sha256sum --status -c - && \
    tar -xf vmaf.tar.gz && \
    cd vmaf-*/libvmaf && \
    meson build --buildtype=release \
    -Dbuilt_in_models=true \
    -Denable_avx512=true \
    -Denable_docs=false \
    -Denable_float=true && \
    ninja -vC build && \
    ninja -vC build install && \
    ninja -vC build -t clean && \
    pkg-config --exists libvmaf && \
    cd "${PREFIX}" && \
    mv -v vmaf* "${PREFIX}/src"

## AviSynth+
RUN set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${AVISYNTHPLUS_VERSION} https://github.com/AviSynth/AviSynthPlus.git && \
    cd AviSynthPlus && \
    mkdir avisynth-build && \
    cd avisynth-build && \
    cmake ../ -G Ninja && \
    ninja && \
    checkinstall --pkgname=avisynth --pkgversion="$(grep -r \
    Version avs_core/avisynth.pc | cut -f2 -d " ")-$(date --rfc-3339=date | \
    sed 's/-//g')-git" --backup=no --deldoc=yes --delspec=yes --deldesc=yes \
    --strip=yes --stripso=yes --addso=yes --fstrans=no --default ninja install && \
    ninja -v -t clean && \
    pkg-config --exists avisynth && \
    cd "${PREFIX}" && \
    mv -v AviSynthPlus "${PREFIX}/src"

## Intel QSV libvpl
RUN set -eux && \
    cd "${PREFIX}" && \
    mkdir -p libvpl && cd libvpl && \
    git init && \
    git remote add origin https://github.com/intel/libvpl.git && \
    git fetch --depth 1 origin ${INTEL_LIBVPL_VERSION} && \
    git checkout FETCH_HEAD && \
    cmake -B build \
        -G"Unix Makefiles" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DBUILD_SHARED_LIBS=OFF \
        -DBUILD_TESTS=OFF \
        -DENABLE_WARNING_AS_ERROR=ON && \
    cmake --build build -j$(nproc) && \
    cmake --install build && \
    cmake --build build --target clean && \
    pkg-config --exists vpl && \
    cd "${PREFIX}" && \
    mv -v libvpl "${PREFIX}/src"

RUN set -eux && \
    apt-get -y install --no-install-recommends \
    libdrm-dev && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${LIBVA_VERSION} https://github.com/intel/libva.git && \
    cd libva && \
    ./autogen.sh \
    --prefix=/usr \
    --libdir=/usr/lib/x86_64-linux-gnu && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    pkg-config --exists libva && \
    cd "${PREFIX}" && \
    mv -v libva "${PREFIX}/src"

## Intel QSV VPL Runtime
RUN set -eux && \
    cd "${PREFIX}" && \
    git clone --depth 1 -b ${INTEL_VPL_GPU_RT_VERSION} https://github.com/intel/vpl-gpu-rt.git && \
    cd vpl-gpu-rt && \
    mkdir -p build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    pkg-config --exists libva && \
    cd "${PREFIX}" && \
    mv -v vpl-gpu-rt "${PREFIX}/src"

## FFmpeg
# ldflags stack-size=2097152 is to increase default stack size from 128KB (musl default) to something
# more similar to glibc (2MB). This fixing segfault with libaom-av1 and libsvtav1 as they seems to pass
# large things on the stack.
#
# ldfalgs -Wl,--allow-multiple-definition is a workaround for linking with multiple rust staticlib to
# not cause collision in toolchain symbols, see comment in checkdupsym script for details.
# Ref: https://github.com/wader/static-ffmpeg/blob/master/Dockerfile
RUN set -eux && \
    cd "${PREFIX}" && \
    wget ${WGET_OPTS} -O ffmpeg.tar.bz2     "${FFMPEG_URL}" && \
    wget ${WGET_OPTS} -O ffmpeg.tar.bz2.asc "${FFMPEG_URL}.asc" && \
    curl -sfSL https://ffmpeg.org/ffmpeg-devel.asc | gpg --import && \
    gpg --verify ffmpeg.tar.bz2.asc ffmpeg.tar.bz2 && \
    \
    tar -xf ffmpeg.tar.bz2 && \
    cd ffmpeg-* && \
    ./configure \
    # encoder & decoder
    --enable-avisynth \
    --enable-libaom \
    --enable-libaribb24 \
    --enable-libass \
    --enable-libdav1d \
    --enable-libfdk-aac \
    --enable-libfreetype \
    --enable-libmp3lame \
    --enable-libvmaf \
    --enable-libvpl \
    --enable-libx264 \
    --enable-libx265 \
    \
    # License
    --enable-gpl \
    --enable-nonfree \
    --enable-version3 \
    \
    # small binary & static build
    --disable-debug \
    --disable-doc \
    --disable-ffplay \
    --disable-shared \
    --enable-small \
    --enable-static \
    \
    # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
    --extra-libs="-lpthread -lm" \
    --pkg-config-flags="--static" \
    \
    --extra-cflags="-fopenmp" \
    --extra-ldflags="-fopenmp -Wl,--allow-multiple-definition -Wl,-z,stack-size=2097152" \
    --toolchain=hardened > ffmpeg_configure.log && \
    make -j$(nproc) && \
    make install && \
    find . -type f -name '*.pc' -not -path '*doc/*' -exec cp -Lv '{}' ${PREFIX}/lib/pkgconfig \; && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v ffmpeg* "${PREFIX}/src"

## Install obuparse
RUN set -eux && \
    cd "${PREFIX}" && \
    mkdir -p obuparse && \
    cd obuparse && \
    git init && \
    git remote add origin https://github.com/dwbuiten/obuparse.git && \
    git fetch --depth 1 origin ${OBUPARSE_VERSION} && \
    git checkout FETCH_HEAD && \
    sed -i'' -e "s@PREFIX=/usr/local@PREFIX=${PREFIX}@g" Makefile && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    cd "${PREFIX}" && \
    mv -v obuparse "${PREFIX}/src"
RUN <<EOF
cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/obuparse.pc
prefix=${PREFIX}
includedir=\${prefix}/include

Name: obuparse
Description: A simple and portable single file AV1 OBU parser.
Version: ${OBUPARSE_VERSION}

Cflags: -I\${includedir}
_DOC_
EOF

## l-smash
RUN set -eux && \
    cd "${PREFIX}" && \
    mkdir -p l-smash && \
    cd l-smash && \
    git init && \
    git remote add origin https://github.com/Mr-Ojii/l-smash.git && \
    git fetch --depth 1 origin ${LSMASH_VERSION} && \
    git checkout FETCH_HEAD && \
    ./configure \
    --enable-shared \
    --extra-cflags="-I${PREFIX}/include" \
    --extra-ldflags="-L${PREFIX}/lib" \
    --prefix="${PREFIX}" \
    && \
    make -j$(nproc) && \
    make install && \
    make clean && \
    pkg-config --exists liblsmash && \
    cd "${PREFIX}" && \
    mv -v l-smash "${PREFIX}/src"

## L-SMASH-Works
RUN set -eux && \
    cd "${PREFIX}" && \
    mkdir -p L-SMASH-Works && \
    cd L-SMASH-Works && \
    git init && \
    git remote add origin https://github.com/Mr-Ojii/L-SMASH-Works.git && \
    git fetch --depth 1 origin ${LSMASHWORKS_VERSION} && \
    git checkout FETCH_HEAD && \
    cd AviSynth && \
    LDFLAGS="-Wl,-Bsymbolic" meson build && \
    cd build && \
    ninja -v && \
    ninja install && \
    ninja -v -t clean && \
    cd "${PREFIX}" && \
    mv -v L-SMASH-Works "${PREFIX}/src"

RUN <<EOF
cat <<- _DOC_ > ${PREFIX}/lib/pkgconfig/liblsmashsource.pc
Name: L-SMASH-Works
Description: Note about LSMASHVideoSource and LibavSMASHSource.
Version: ${LSMASHWORKS_VERSION}

Libs: -L/usr/local/lib/avisynth
_DOC_
EOF

## FFmpeg runtime package list saved
RUN set -eux && \
    apt-file update && \
    ldd /usr/local/bin/ffmpeg /usr/local/bin/ffprobe /usr/local/lib/avisynth/liblsmashsource.so | \
    awk -F ' => ' '{print $2}' | awk -F' ' '{print $1}' | \
    tr -d '\t' | sort | uniq | grep -v -E '^/opt/ffmpeg' | xargs -I'{}' cp -Lv '{}' ${PREFIX}/lib

RUN set -eux && \
    ls -lah /usr/local/bin && \
    ffmpeg -version

RUN set -eux && \
    ffmpeg -hide_banner -hwaccels && \
    ffmpeg -hide_banner -buildconf && \
    for i in decoders encoders; do echo ${i}:; ffmpeg -hide_banner -${i} | \
    egrep -i "[x|h]264|[x|h]265|av1|cuvid|hevc|nv[dec|enc]|qsv|vaapi|vp9"; done

## join_logo_scp_trial build
COPY modules    "${PREFIX}/src/JLSTSL/modules"
ARG _BINDIR="${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial/bin/"
RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/chapter_exe/src" && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" Makefile && \
    make -j$(nproc) && \
    mv -v chapter_exe "${_BINDIR}"

RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/logoframe/src" && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" Makefile && \
    make -j$(nproc) && \
    mv -v logoframe "${_BINDIR}"

RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/join_logo_scp/src" && \
    make -j$(nproc) && \
    mv -v join_logo_scp "${_BINDIR}"

RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/tsdivider/" && \
    mkdir -p build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release .. && \
    make -j$(nproc) && \
    mv -v tsdivider "${_BINDIR}"

RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/delogo/src" && \
    mkdir -p ${PREFIX}/lib/avisynth/ && \
    sed -i'' -e "s@-I/usr/local/include/avisynth@$(pkg-config --cflags --libs avisynth)@g" \
    -e "s@INSTALL_DIR = /usr/local/lib/avisynth/@INSTALL_DIR = ${PREFIX}/lib/avisynth/@g" Makefile && \
    make -j$(nproc) && \
    mkdir -p /usr/local/lib/avisynth && \
    make install

RUN set -eux && \
    cd "${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial" && \
    node -v && \
    npm --version && \
    npm install --no-save --loglevel=info --omit=dev && \
    mv -v ${PREFIX}/src/JLSTSL/modules/join_logo_scp_trial /join_logo_scp_trial && \
    \
    # Copy JL directory
    rm -rf /join_logo_scp_trial/JL && \
    cp -av "${PREFIX}/src/JLSTSL/modules/join_logo_scp/JL" /join_logo_scp_trial/ && \
    test -f /join_logo_scp_trial/JL/data/ChList.csv && \
    \
    cd /join_logo_scp_trial && \
    npm link

# Archive source code
RUN set -eux && \
    cd "${PREFIX}" && \
    tar -cv -f "src-ffmpeg-$(date '+%Y%m%d%H%M%S%z').tar.xz" -C "${PREFIX}" src && \
    rm -rf "${PREFIX}/src"

#- -------------------------------------------------------------------------------------------------
#- Runner
#-
FROM base AS runner
# ARG は、利用する各ステージごとに宣言する必要がある。
ARG DEBCONF_NOWARNINGS
ARG DEBIAN_FRONTEND
ARG PYTHONUNBUFFERED

ENV LD_LIBRARY_PATH="/opt/ffmpeg/lib:/opt/modules/lib:/usr/local/lib"
ENV PKG_CONFIG_PATH="/opt/ffmpeg/share/pkgconfig:/opt/ffmpeg/lib/pkgconfig:/opt/modules/lib/pkgconfig"

# Intel Driver
RUN set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    intel-media-va-driver \
    vainfo && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/*

# FFmpeg runtime
COPY --from=build-ffmpeg /usr/local/bin/ffmpeg      /usr/local/bin/ffmpeg
COPY --from=build-ffmpeg /usr/local/bin/ffprobe     /usr/local/bin/ffprobe
COPY --from=build-ffmpeg /opt/ffmpeg                /opt/ffmpeg
COPY --from=build-ffmpeg /usr/local/lib/avisynth    /usr/local/lib/avisynth

## check FFmpeg exec
RUN set -eux && \
    ls -lah /opt/ffmpeg/lib && \
    ls -lah /usr/local/bin && \
    ffmpeg -version

# check FFmpeg library
RUN set -eux && \
    ffmpeg -hide_banner -hwaccels && \
    ffmpeg -hide_banner -buildconf && \
    for i in decoders encoders; do echo ${i}:; ffmpeg -hide_banner -${i} | \
    egrep -i "[x|h]264|[x|h]265|av1|cuvid|hevc|nv[dec|enc]|qsv|vaapi|vp9"; done

COPY --from=build-ffmpeg /join_logo_scp_trial      /join_logo_scp_trial
WORKDIR "/join_logo_scp_trial"

# join_logo_scp
RUN set -eux && \
    apt-get update && \
    apt-get -y install --no-install-recommends \
    libboost-filesystem-dev \
    libboost-program-options-dev \
    libboost-system-dev && \
    \
    # Cleanup \
    apt-get -y autoremove && \
    apt-get -y clean && \
    rm -rf /var/lib/apt/lists/* && \
    npm link

# Link join_logo_scp
RUN set -eux && \
    jlse --help

ENTRYPOINT [ "/bin/bash", "-c" ]
CMD [ "" ]

# vim: set filetype=dockerfile:
