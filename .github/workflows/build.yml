# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Builds

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - main
    paths:
      - ".github/workflows/build.yml"
      - "modules/**"
      - "scripts/**"
      - "Dockerfile.ubuntu2404"
  workflow_dispatch:
    inputs:
      type:
        description: "Release type"
        required: true
        default: "beta"
        type: choice
        options:
          - "release"
          - "beta"
      rebuild:
        description: "Re build container?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  builds:
    name: Container(${{ matrix.type }})
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        type:
          - ubuntu2404
    permissions:
      contents: write
      packages: write
    env:
      TZ: "Asia/Tokyo"
    outputs:
      new_tag: ${{ steps.new_tag.outputs.new_tag }}
      image_tag: ${{ steps.output_tag.outputs.image_tag }}

    steps:
      - name: Checkout from repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: 0

      - name: Generate new tag
        if: ${{ github.event.pull_request.merged == true || inputs.type != '' }}
        id: new_tag
        run: |
          set -euo pipefail

          TODAY=$(date +'%y.%m.%d')
          YEAR_MONTH=$(date +'%y.%m')
          echo "Today's date: ${TODAY}"
          echo "Year-Month: ${YEAR_MONTH}"

          # PR merged = beta, workflow_dispatch = user choice
          RELEASE_TYPE="${{ inputs.type }}"
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            RELEASE_TYPE="beta"
          fi

          if [ "${RELEASE_TYPE}" = "release" ]; then
            # Release tag: vYY.MM.DD.XX
            MATCHED_TAGS=$(git tag --sort=creatordate | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}$" || true)
            echo "Matched release tags:"
            echo "${MATCHED_TAGS}"

            LATEST_TAG=$(echo "${MATCHED_TAGS}" | grep "^v${TODAY}\." | tail -n 1 || true)
            echo "Latest release tag for today: ${LATEST_TAG}"

            if [ "${LATEST_TAG}" = "" ]; then
              NEW_TAG="v${TODAY}.01"
            else
              LAST_NUM=$(echo "${LATEST_TAG}" | cut -d '.' -f 4)
              NEW_NUM=$(printf "%02d" $((10#${LAST_NUM} + 1)))
              NEW_TAG="v${TODAY}.${NEW_NUM}"
            fi
          else
            # Beta tag: vYY.MM.00-betaX
            ALL_TAGS=$(git tag --sort=-version:refname)
            LATEST_RELEASE=$(echo "${ALL_TAGS}" | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}$" | head -n 1 || true)
            LATEST_BETA=$(echo "${ALL_TAGS}" | grep -E "^v[0-9]{2}\.[0-9]{2}\.00-beta[0-9]+$" | head -n 1 || true)

            echo "Latest release: ${LATEST_RELEASE}"
            echo "Latest beta: ${LATEST_BETA}"

            # Check if there are any tags between latest release and now
            if [ "${LATEST_RELEASE}" != "" ]; then
              # Get all tags after the latest release
              TAGS_AFTER_RELEASE=$(git tag --sort=creatordate | sed -n "/^${LATEST_RELEASE}$/,\$p" | tail -n +2)
              echo "Tags after latest release:"
              echo "${TAGS_AFTER_RELEASE}"

              # Check if all tags after release are beta tags
              NON_BETA_COUNT=$(echo "${TAGS_AFTER_RELEASE}" | grep -v -E "^v[0-9]{2}\.[0-9]{2}\.00-beta[0-9]+$" | grep -c . || true)

              if [ "${NON_BETA_COUNT}" = "0" ] && [ "${LATEST_BETA}" != "" ]; then
                # All tags after latest release are beta - increment the latest beta
                BETA_BASE=$(echo "${LATEST_BETA}" | cut -d '-' -f 1)
                BETA_NUM=$(echo "${LATEST_BETA}" | cut -d '-' -f 2 | sed 's/beta//g')
                NEW_TAG="${BETA_BASE}-beta$((BETA_NUM + 1))"
                echo "All tags after release are beta, incrementing: ${LATEST_BETA} -> ${NEW_TAG}"
              else
                # There's a non-beta tag or no beta exists - create new beta for this month
                NEW_TAG="v${YEAR_MONTH}.00-beta1"
                echo "Creating new beta for this month: ${NEW_TAG}"
              fi
            else
              # No release tag exists - create new beta for this month
              if [ "${LATEST_BETA}" != "" ]; then
                # Increment existing beta
                BETA_BASE=$(echo "${LATEST_BETA}" | cut -d '-' -f 1)
                BETA_NUM=$(echo "${LATEST_BETA}" | cut -d '-' -f 2 | sed 's/beta//g')
                NEW_TAG="${BETA_BASE}-beta$((BETA_NUM + 1))"
                echo "No release exists, incrementing beta: ${LATEST_BETA} -> ${NEW_TAG}"
              else
                NEW_TAG="v${YEAR_MONTH}.00-beta1"
                echo "No tags exist, creating first beta: ${NEW_TAG}"
              fi
            fi
          fi
          echo "New tag: ${NEW_TAG}"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: meta
        with:
          images: ghcr.io/naa0yama/join_logo_scp_trial
          flavor: |
            latest=false
            suffix=-${{ matrix.type }}
          tags: |
            type=ref,event=tag,prefix=,enable=true

            # PR number with sha tag - only for PR
            type=sha,enable=${{ github.event.pull_request.merged != true && inputs.type == '' }},prefix=pull${{ github.event.pull_request.number }}-,format=short

            # workflow_dispatch or PR merged tag
            type=raw,value=${{ steps.new_tag.outputs.new_tag }},enable=${{ github.event.pull_request.merged == true || inputs.type != '' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Output image tag
        id: output_tag
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: Dockerfile.${{ matrix.type }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: ${{ inputs.no-cache == true }}
          build-args: |
            CONTAINER_IMAGE=${{ steps.output_tag.outputs.image_tag }}

  test:
    name: Test(${{ matrix.type }})
    needs: builds
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        type:
          - ubuntu2404
    permissions:
      contents: read
      packages: read
    env:
      TZ: "Asia/Tokyo"

    steps:
      - name: Checkout from repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image for test
        run: |
          IMAGE_TAG="${{ needs.builds.outputs.image_tag }}"
          docker pull "${IMAGE_TAG}"

      - name: jlse test
        run: |
          set -euxo pipefail
          bash dev-build.sh --gh-action "${{ needs.builds.outputs.image_tag }}"
          BUILD_EXIT_CODE=$?

          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            STATUS="✅ Successed"
          else
            STATUS="❌ Failed"
          fi

          # Action Summary Create
          {
            echo "## test_jlse Summary"
            echo "**Status:** $STATUS"
            echo "**Exit code:** $BUILD_EXIT_CODE"
            echo ""
            echo "\`\`\`bash"
            cat ./videos/source/test_jlse.log
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

          # Exit with error if test failed
          exit $BUILD_EXIT_CODE

  cleanup:
    name: Cleanup PR images
    needs: [builds, test]
    if: ${{ always() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      packages: write
    env:
      TZ: "Asia/Tokyo"

    steps:
      - name: Delete PR container images
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = "${{ github.event.pull_request.number }}";
            const packageName = "join_logo_scp_trial";
            const tagPrefix = `pull${prNumber}-`;

            console.log('Deleting all images for PR #' + prNumber);
            console.log('Tag prefix: ' + tagPrefix);

            try {
              // Get all package versions
              const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                package_type: 'container',
                package_name: packageName,
                username: context.repo.owner,
                per_page: 100,
              });

              console.log('Found ' + versions.data.length + ' package versions');

              let deletedCount = 0;

              // Find and delete all versions with tags starting with the PR prefix
              for (const version of versions.data) {
                const tags = version.metadata.container.tags;
                console.log('Checking version ' + version.id + ' with tags: ' + JSON.stringify(tags));

                // Check if any tag starts with the PR prefix
                const hasPRTag = tags.some(tag => tag.startsWith(tagPrefix));

                if (hasPRTag) {
                  console.log('Deleting package version: ' + version.id + ' with tags: ' + JSON.stringify(tags));

                  await github.rest.packages.deletePackageVersionForUser({
                    package_type: 'container',
                    package_name: packageName,
                    username: context.repo.owner,
                    package_version_id: version.id,
                  });

                  console.log('Successfully deleted package version');
                  deletedCount++;
                }
              }

              console.log(`Cleanup complete. Deleted ${deletedCount} image(s) for PR #${prNumber}`);
            } catch (error) {
              console.log('Error during cleanup: ' + error.message);
              // Don't fail the workflow if cleanup fails
            }

  release:
    name: Create Release
    needs: [builds, test]
    if: ${{ always() && needs.test.result == 'success' && (github.event.pull_request.merged == true || inputs.type != '') }}
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: write
    env:
      TZ: "Asia/Tokyo"

    steps:
      - name: Checkout from repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get latest release tag
        id: latest_release
        run: |
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}$" | head -n1 || echo "")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest release tag: ${LATEST_TAG}"

      - name: Cleanup old beta releases
        if: ${{ github.event.pull_request.merged == true || inputs.type == 'beta' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });

            const newTag = "${{ needs.builds.outputs.new_tag }}";
            const baseVersion = newTag.split('-')[0]; // v25.10.00 (could be previous month)

            console.log('New tag: ' + newTag);
            console.log('Base version: ' + baseVersion);

            for (const release of releases.data) {
              // Delete beta releases with same base version (but not the new one)
              if (release.prerelease &&
                  release.tag_name.startsWith(baseVersion + '-beta') &&
                  release.tag_name !== newTag) {
                console.log('Deleting old beta release: ' + release.tag_name);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
                // Delete the tag too
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'tags/' + release.tag_name,
                  });
                  console.log('Deleted tag: ' + release.tag_name);
                } catch (error) {
                  console.log('Could not delete tag: ' + release.tag_name);
                }
              }
            }

      - name: Create Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        if: ${{ inputs.type == 'release' }}
        with:
          name: ${{ needs.builds.outputs.new_tag }}
          tag_name: ${{ needs.builds.outputs.new_tag }}
          generate_release_notes: true
          draft: false
          prerelease: false
          make_latest: true

      - name: Create Beta Release
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: ${{ github.event.pull_request.merged == true || inputs.type == 'beta' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newTag = "${{ needs.builds.outputs.new_tag }}";
            const latestTag = "${{ steps.latest_release.outputs.latest_tag }}";

            const releaseParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newTag,
              name: newTag,
              draft: false,
              prerelease: true,
              make_latest: 'false',
              generate_release_notes: true,
            };

            // If there's a latest release tag, use it as previous tag
            if (latestTag) {
              releaseParams.previous_tag_name = latestTag;
            }

            const release = await github.rest.repos.createRelease(releaseParams);
            console.log('Created beta release: ' + release.data.html_url);
