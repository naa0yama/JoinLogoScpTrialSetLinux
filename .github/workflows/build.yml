---
name: Builds

on:
  # push:
  #   branches-ignore:
  #     - main
  #     - dev/**
  #   tags:
  #     - 'v*'
  pull_request:
    branches:
      - main
    types:
      - closed
      - opened
      - reopened
      - synchronize
      - auto_merge_enabled
  release:
    types:
      - created
      - edited
      - published
  workflow_dispatch:
    inputs:
      rebuild:
        description: "Re build container?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

jobs:
  builds:
    name: Container ${{ matrix.type }}
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        type:
          - ubuntu2404
    permissions:
      contents: write
      packages: write
    env:
      TZ: 'Asia/Tokyo'

    steps:
      - name: Checkout from repository
        uses: actions/checkout@v4.2.2

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/naa0yama/join_logo_scp_trial
          flavor: |
            latest=false
            suffix=-${{ matrix.type }}
          tags: |
            type=ref,event=tag,prefix=,enable=true

            # minimal (short sha)
            type=sha,enable=true,prefix=,format=short

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6.14.0
        with:
          context: .
          file: Dockerfile.${{ matrix.type }}
          push: ${{ contains( github.event.pull_request.merged, true ) || inputs.rebuild == 'true' || github.event_name == 'release' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: ${{ inputs.no-cache == true }}

      - name: Cleanup pre-releases
        uses: actions/github-script@v7.0.1
        if: ${{ github.event.pull_request.merged == true }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |+
            const __prereleases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            const prereleases = __prereleases.data

            for (const index in prereleases) {
              if (prereleases[index].prerelease == true || prereleases[index].draft == true) {
                console.log('delete pre-release & draft ' + prereleases[index]['id'] + '\t' + prereleases[index]['name'])

                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: prereleases[index]['id'],
                });
              }
            }

            console.log('end run')

      - name: Generate new pre-release tag
        id: new_tag
        run: |
          TODAY=$(date +'%y.%m.%d')
          PRE_TAG=$(git tag --sort=creatordate | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}-beta[0-9]+$" | tail -n 1)
          if [ "${PRE_TAG}" = "" ]; then
            NEW_TAG="v${TODAY}-beta1"
          else
            PRE_TAG_DATE=$(echo "${PRE_TAG}" | cut -d '-' -f 1)
            if [ "$PRE_TAG_DATE" = "$TODAY" ]; then
              PRE_TAG_VERSION=$(echo "${PRE_TAG}" | cut -d '-' -f 2- | sed 's/beta//g')
              NEW_TAG="v${TODAY}-beta$((PRE_TAG_VERSION + 1))"
            else
              NEW_TAG="v${TODAY}-beta1"
            fi
          fi
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Pre-Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.event.pull_request.merged == true }}
        with:
          name: ${{ steps.new_tag.outputs.new_tag }}
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          generate_release_notes: true
          draft: false
          prerelease: true
          make_latest: ${{ env.MAKE_LATEST }}
