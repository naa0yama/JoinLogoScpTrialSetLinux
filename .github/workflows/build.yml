---
name: Builds

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/build.yml"
      - "modules/**"
      - "scripts/**"
      - "Dockerfile.ubuntu2404"
  workflow_dispatch:
    inputs:
      type:
        description: "Release type"
        required: true
        default: "beta"
        type: choice
        options:
          - "release"
          - "beta"
      rebuild:
        description: "Re build container?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

permissions: {}

jobs:
  builds:
    name: Container ${{ matrix.type }}
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        type:
          - ubuntu2404
    permissions:
      contents: write
      packages: write
    env:
      TZ: "Asia/Tokyo"

    steps:
      - name: Checkout from repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: 0

      - name: Generate new tag
        if: ${{ inputs.type != '' }}
        id: new_tag
        run: |
          set -euo pipefail

          TODAY=$(date +'%y.%m.%d')
          echo "Today's date: ${TODAY}"

          if [ "${{ inputs.type }}" = "release" ]; then
            # Release tag: vYY.MM.DD.XX
            MATCHED_TAGS=$(git tag --sort=creatordate | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}$" || true)
            echo "Matched release tags:"
            echo "${MATCHED_TAGS}"

            LATEST_TAG=$(echo "${MATCHED_TAGS}" | grep "^v${TODAY}\." | tail -n 1 || true)
            echo "Latest release tag for today: ${LATEST_TAG}"

            if [ "${LATEST_TAG}" = "" ]; then
              NEW_TAG="v${TODAY}.01"
            else
              LAST_NUM=$(echo "${LATEST_TAG}" | cut -d '.' -f 4)
              NEW_NUM=$(printf "%02d" $((10#${LAST_NUM} + 1)))
              NEW_TAG="v${TODAY}.${NEW_NUM}"
            fi
          else
            # Beta tag: vYY.MM.DD.XX-betaX
            MATCHED_TAGS=$(git tag --sort=creatordate | grep -E "^v[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}-beta[0-9]+$" || true)
            echo "Matched beta tags:"
            echo "${MATCHED_TAGS}"

            LATEST_TAG=$(echo "${MATCHED_TAGS}" | grep "^v${TODAY}\." | tail -n 1 || true)
            echo "Latest beta tag for today: ${LATEST_TAG}"

            if [ "${LATEST_TAG}" = "" ]; then
              NEW_TAG="v${TODAY}.01-beta1"
            else
              BASE_VER=$(echo "${LATEST_TAG}" | cut -d '-' -f 1)
              BETA_NUM=$(echo "${LATEST_TAG}" | cut -d '-' -f 2 | sed 's/beta//g')

              if [ "${BASE_VER}" = "v${TODAY}.01" ]; then
                NEW_TAG="v${TODAY}.01-beta$((BETA_NUM + 1))"
              else
                LAST_NUM=$(echo "${BASE_VER}" | cut -d '.' -f 4)
                NEW_NUM=$(printf "%02d" $((10#${LAST_NUM} + 1)))
                NEW_TAG="v${TODAY}.${NEW_NUM}-beta1"
              fi
            fi
          fi
          echo "New tag: ${NEW_TAG}"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: meta
        with:
          images: ghcr.io/naa0yama/join_logo_scp_trial
          flavor: |
            latest=false
            suffix=-${{ matrix.type }}
          tags: |
            type=ref,event=tag,prefix=,enable=true

            # minimal (short sha)
            type=sha,enable=true,prefix=,format=short

            # workflow_dispatch tag
            type=raw,value=${{ steps.new_tag.outputs.new_tag }},enable=${{ inputs.type != '' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: Dockerfile.${{ matrix.type }}
          push: ${{ contains( github.event.pull_request.merged, true ) || inputs.rebuild == 'true' || github.event_name == 'release' }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: ${{ inputs.no-cache == true }}

      - name: jlse test
        run: |
          set -euxo pipefail
          bash dev-build.sh --gh-action "${{ steps.meta.outputs.tags }}"
          BUILD_EXIT_CODE=$?

          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            STATUS="✅ Successed"
          else
            STATUS="❌ Failed"
          fi

          # Action Summary Create
          {
            echo "## test_jlse Summary"
            echo "**Status:** $STATUS"
            echo "**Exit code:** $BUILD_EXIT_CODE"
            echo ""
            echo "\`\`\`bash"
            cat ./videos/source/test_jlse.log
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

      - name: Cleanup pre-releases
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: ${{ github.event.pull_request.merged == true }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });

            for (const release of releases.data) {
              if (release.draft == true && release.prerelease == true) {
                console.log('Deleting draft beta release: ' + release.id + '\t' + release.name);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
              }
            }

            console.log('Cleanup completed');

      - name: Create Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: ${{ inputs.type == 'release' }}
        with:
          name: ${{ steps.new_tag.outputs.new_tag }}
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          generate_release_notes: true
          draft: false
          prerelease: false
          make_latest: true

      - name: Create Beta Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: ${{ inputs.type == 'beta' }}
        with:
          name: ${{ steps.new_tag.outputs.new_tag }}
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          generate_release_notes: true
          draft: false
          prerelease: true
          make_latest: false
